#! /usr/bin/env bash
#
# Look through libraries and find a name for the given
# uniqueid. Searches classes and methods at the moment.
#

MULLE_EXECUTABLE_VERSION=0.9.1

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE} [options] <uniqueid> <library>+

   Search though libraries for a string matching a uniqueid, This could be
   amongst other things, a @selector or the mulle_objc_classid_t of a class.

Options:
EOF

   options_technical_flags_usage | sort >&2

   exit 1
}


r_prettify_uniqueid()
{
   log_entry "r_prettify_uniqueid" "$@"

   local uniqueid="$1"

   uniqueid="`tr '[A-Z]' '[a-z]' <<< "${uniqueid}"`"
   uniqueid="${uniqueid#0x}"
   uniqueid="${uniqueid#\$}"

   case "${uniqueid}" in
      [0-9a-f])
         uniqueid="0000000${uniqueid}"
      ;;
      [0-9a-f][0-9a-f])
         uniqueid="000000${uniqueid}"
      ;;
      [0-9a-f][0-9a-f][0-9a-f])
         uniqueid="00000${uniqueid}"
      ;;
      [0-9a-f][0-9a-f][0-9a-f][0-9a-f])
         uniqueid="0000${uniqueid}"
      ;;
      [0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f])
         uniqueid="000${uniqueid}"
      ;;
      [0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f])
         uniqueid="00${uniqueid}"
      ;;
      [0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f])
         uniqueid="0${uniqueid}"
      ;;
      [0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f])
      ;;

      *)
         return 1
      ;;
   esac

   RVAL="${uniqueid}"
}


grep_library()
{
   log_entry "grep_library" "$@"

   local uniqueid="$1"
   local library="$2"

   if [ ! -f "${library}" ]
   then
      return 1
   fi

   log_verbose "Searching in \"${library}\" (${PWD#${MULLE_USER_PWD}/})..."

   local found

   if [ "${MULLE_FLAG_LOG_FLUFF}" = "YES" ]
   then
      case "${library}" in
         *.so|*.dylib)
            found="`rexekutor "${MULLE_OBJC_LIST}" -s "${library}" | rexekutor fgrep "${uniqueid}"`"
         ;;

         *)
            found="`rexekutor "${MULLE_OBJC_LISTA}" \
                                 ${MULLE_TECHNICAL_FLAGS} \
                                 ${MULLE_OBJC_LISTA_FLAGS} \
                                 -s "${library}" | rexekutor fgrep "${uniqueid}"`"
         ;;
      esac
   else
      case "${library}" in
         *.so|*.dylib)
            found="`rexekutor "${MULLE_OBJC_LIST}" -s "${library}" 2> /dev/null | rexekutor fgrep "${uniqueid}"`"
         ;;

         *)
            found="`rexekutor "${MULLE_OBJC_LISTA}" \
                                 ${MULLE_TECHNICAL_FLAGS} \
                                 ${MULLE_OBJC_LISTA_FLAGS} \
                                 -s "${library}" 2> /dev/null | rexekutor fgrep "${uniqueid}"`"
         ;;
      esac
   fi

   if [ -z "${found}" ]
   then
      return 1
   fi
   log_verbose "${uniqueid} found in \"${library}\""
   echo "${found}"
}


grep_libraries()
{
   log_entry "grep_libraries" "$@"

   local uniqueid="$1"

   [ -z "${LIB_PATH}" ] && internal_fail "LIB_PATH is empty"

   IFS="
"
   for i in `ls -1`
   do
      IFS="${DEFAULT_IFS}"

      case "$i" in
         *.a|*.lib)
            if grep_library "${uniqueid}" "$i"
            then
               return 0
            fi
         ;;

         *.so|*.dylib)
            if grep_library "${uniqueid}" "$i"
            then
               return 0
            fi
         ;;

         *)
            log_fluff "Ignored \"$i\""
         ;;
      esac
   done

   IFS="${DEFAULT_IFS}"

   return 1
}


search()
{
   log_entry "search" "$@"

   local uniqueid="$1"; shift

   local folder
   local old

   old="${PWD}"

   if [ $# -eq 0 ]
   then
      IFS=":"

      for folder in ${LIB_PATH}
      do
         IFS="${DEFAULT_IFS}"

         if [ -d "${folder}" ]
         then
            cd "${folder}"
            if grep_libraries "${uniqueid}"
            then
               cd "${old}"
               return
            fi
         fi
      done
      cd "${old}"

      IFS="${DEFAULT_IFS}"
   else
      while [ $# -ne 0 ]
      do
         IFS=":"

         for folder in ${LIB_PATH}
         do
            IFS="${DEFAULT_IFS}"

            if [ -d "${folder}" ]
            then
               cd "${folder}"
               if grep_library "${uniqueid}" "${1}"
               then
                  cd "${old}"
                  return
               fi
            fi
         done

         cd "${old}"

         IFS="${DEFAULT_IFS}"

         shift
      done
   fi
}

find_in_libraries()
{
   log_entry "find_in_libraries" "$@"

   local uniqueid="$1"; shift

   if [ -z "${LIB_PATH}" ]
   then
      LIB_PATH="${DEPENDENCY_DIR:-dependency}/lib:${DEPENDENCY_DIR:-dependency}/Debug/lib"
   fi

   search "${uniqueid}" "$@" | \
      sed "s|^${uniqueid};\\([^;]*\\).*$|\\1|" | \
      sed "s|^.*;${uniqueid};\\([^;]*\\).*$|\\1|" | \
      sed 's|^[-+]||' | \
      sort -u
}


find_local_words()
{
   rexekutor find . -type f \( -path ./build -prune -o \
                               -path ./dependency -prune -o \
                               -path ./addiction -prune -o\
                               -name "*.[hcm]" -o -name "*.aam" \) \
                      -exec grep -o -E '\w+' {} \;
}


find_local_unique_words()
{
   log_entry "find_local_unique_words" "$@"

   find_local_words | sort -u
}


find_local_uniqueids()
{
   log_entry "find_local_uniqueids" "$@"

   find_local_unique_words | CSV=ON rexekutor xargs "${MULLE_OBJC_UNIQUEID}"
}



main()
{
   local LIB_PATH

   local OPTION_SELECTOR="NO"
   local OPTION_LOCAL="YES"
   local OPTION_LIBRARIES="YES"
   local OPTION_DUMP_WORDS="NO"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      # your option handling
      case "$1" in
         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -L|--librarypath)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            LIB_PATH="`colon_concat "${LIB_PATH}" "$1"`"
         ;;

         --local)
            OPTION_LOCAL="YES"
         ;;

         --no-local)
            OPTION_LOCAL="NO"
         ;;

         --dump-words)
            OPTION_DUMP_WORDS="YES"
         ;;

         --libraries)
            OPTION_LIBRARIES="YES"
         ;;

         --no-libraries)
            OPTION_LIBRARIES="NO"
         ;;

         --selector)
            OPTION_SELECTOR="YES"
         ;;

         -h|--help)
            usage
         ;;

         -*)
            fail "unknown option $1"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      MULLE_VIRTUAL_ROOT="`mulle-sde project-dir`"
      [ -z "${MULLE_VIRTUAL_ROOT}" ] && fail "MULLE_VIRTUAL_ROOT can not be determined"
   fi

   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_CRAFT_DEPENDENCY_DIR}}"
   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_DEPENDENCY_DIRNAME:-dependency}}"

   if [ "${OPTION_DUMP_WORDS}" = "YES" ]
   then
      find_local_words
      exit $?
   fi

   local uniqueid

   [ $# -eq 0 ] && usage

   #
   # make uniqueid pretty for various formats
   #
   [ -z "${1}" ] && usage

   # prefer sibling mulle-objc-uniqueid
   if [ -z "${MULLE_OBJC_UNIQUEID}" ]
   then
      MULLE_OBJC_UNIQUEID="${0%/*}/mulle-objc-uniqueid"
      if [ ! -x "${MULLE_OBJC_UNIQUEID}" ]
      then
         MULLE_OBJC_UNIQUEID="`command -v mulle-objc-uniqueid`"
         [ -z "${MULLE_OBJC_UNIQUEID}" ] && echo "mulle-objc-uniqueid not in PATH" >&2 && exit 1
      fi
   fi

   if [ -z "${MULLE_OBJC_LIST}" ]
   then
      MULLE_OBJC_LIST="${0%/*}/mulle-objc-list"
      if [ ! -x "${MULLE_OBJC_LIST}" ]
      then
         MULLE_OBJC_UNIQUEID="`command -v mulle-objc-list`"
         [ -z "${MULLE_OBJC_LIST}" ] && echo "mulle-objc-list not in PATH" >&2 && exit 1
      fi
   fi

   if [ -z "${MULLE_OBJC_LISTA}" ]
   then
      MULLE_OBJC_LISTA="${0%/*}/mulle-objc-lista"
      if [ ! -x "${MULLE_OBJC_LISTA}" ]
      then
         MULLE_OBJC_LISTA="`command -v mulle-objc-lista`"
         [ -z "${MULLE_OBJC_LISTA}" ] && echo "mulle-objc-lista not in PATH" >&2 && exit 1
      fi
   fi

   if [ "${OPTION_SELECTOR}" = "YES" ]
   then
      uniqueid="`${MULLE_OBJC_UNIQUEID} "$1"`"
      log_info "@selector( $1) is ${uniqueid}"
   else
      r_prettify_uniqueid "$1"
      uniqueid="${RVAL}"
   fi

   [ -z "${uniqueid}" ] && fail "malformed input \"$1\""
   shift



   if [ "${OPTION_LOCAL}" = "YES" ]
   then
      local escaped

      r_escaped_grep_pattern "${uniqueid}"
      escaped="${RVAL}"
      result="`find_local_uniqueids | rexekutor egrep "^${escaped};" | rexekutor cut -d ';' -f 2`"
   fi

   if [ -z "${result}" ]
   then
      if [ "${OPTION_LIBRARIES}" = "YES" ]
      then
            result="`find_in_libraries "${uniqueid}" `"
      fi
   fi

   if [ -z "${result}" ]
   then
      log_warning "${uniqueid} is unknown."
      return 1
   fi

   if [ "${OPTION_SELECTOR}" = "NO" ]
   then
      log_info "@selector( $result) is ${uniqueid}"
   fi

   echo "${result}"
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   set -o pipefail
}

#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="`tr '\\' '/' <<< "${PATH}"`"
   ;;
esac

#
# combine all coverage files into one and sort -u it
#

_init "$@"
main "$@"
