#! /usr/bin/env bash
#
# this script unpacks an .a file and creates a list of defined methods
# for each .o file
#
[ "${TRACE}" = "YES" -o "${MULLE_OBJC_LISTA_TRACE}" = "YES" ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION=0.9.1

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE} [options] <library>

   Use mulle-objc-lista on a static library to create ObjC dependencies
   information and other information types.

Options:
   See mulle-objc-list
EOF

   exit 1
}



setup_cc_environment()
{
   case "${MULLE_UNAME}" in
      mingw*)
         CC="mulle-clang-cl"
         LD="link"
         NM="mulle-nm"
         EXTERN_GLOBAL_PREFIX="__declspec( dllexport) "
         EXTERN_SYMBOL_PREFIX="__imp__"

         case "${OPTION_CONFIGURATION}" in
            Release)
               # MT
               #LIBRARIES="kernel32.lib libcmt.lib libvcruntime.lib libucrt.lib"
               # MD (kernel32.lib)
               LIBRARIES="kernel32.lib msvcrt.lib ucrt.lib vcruntime.lib psapi.lib"
            ;;

            Debug)
               # MTd
               #LIBRARIES="kernel32.lib libcmtd.lib libvcruntimed.lib libucrtd.lib"
               # MDd
               LIBRARIES="kernel32.lib msvcrtd.lib ucrtd.lib vcruntimed.lib psapi.lib"
            ;;
         esac


         # filnd the ms linker
         IFS=":"
         for item in $PATH
         do
            if [ -x "${item}/cl.exe" -a -x "${item}/link.exe" ]
            then
               LD="${item}/link.exe"
               break
            fi
         done
         IFS="
"
      ;;

      *)
         CC="mulle-clang"
         LD="mulle-clang"
         NM="nm"  # will do
      ;;
   esac

   if [ -z "`command -v "${CC}"`" ]
   then
      fail "${CC} not in PATH"
   fi
   if [ -z "`command -v "${LD}"`" ]
   then
      fail "${LD} not in PATH"
   fi
   if [ -z "`command -v "${NM}"`" ]
   then
      fail "${NM} not in PATH"
   fi
}


shlib_extension()
{
   case "${MULLE_UNAME}" in
      darwin)
         echo "dylib"
      ;;

      mingw*)
         echo "dll"
      ;;

      *)
         echo "so"
       ;;
   esac
}


shlib_cflags()
{
   case "${MULLE_UNAME}" in
      darwin)
         echo "-fno-common"
      ;;

      mingw*)
         case "${OPTION_CONFIGURATION}" in
            Release)
               # MD (kernel32.lib)
               echo "-MD"
            ;;

            Debug)
               # MDd
               echo "-MDd"
            ;;
         esac

       ;;

      *)
         echo "-fPIC -fno-common"
       ;;
   esac
}


shlib_ldflags()
{
   case "${MULLE_UNAME}" in
      darwin)
         echo "-dynamiclib -Os -flat_namespace -undefined suppress"
      ;;

      mingw)
         echo "-DLL" # "-NODEFAULTLIB"
      ;;

      *)
         echo "-shared"
      ;;
   esac
}


shlib_load_all_library()
{
   local library="$1"

   case "${MULLE_UNAME}" in
      darwin)
         echo "-force_load '${library}'"
      ;;

      mingw)
         echo "'-WHOLEARCHIVE:${library}'"
      ;;

      *)
         echo "-Wl,--whole-archive" "'${library}'" "-Wl,--no-whole-archive"
      ;;
   esac
}


_nm_global_defined_names()
{
   local filename="$1"

   case "${MULLE_UNAME}" in
      darwin)
         exekutor ${NM} -g -U -j "${filename}" | \
            egrep -v ':$|^$' | \
            sed 's/^_//'
      ;;

      mingw*)
         #
         # -p no sort, -P posix style (name first)
         # get rid of ??_C@_07DPFPOHBA@atexit?3?$AA@ and stuff like that
         #
         exekutor ${NM} -g --defined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | grep -v '@_' \
            | sed 's/^__imp_//' \
            | sed 's/@[0-9][0-9]*//' \
            | sed 's/^_//'  \
            | egrep -v ':$|^$'
      ;;

      linux|*)
         # -p no sort, -P posix style (name first)
         exekutor ${NM} -g --defined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | egrep -v ':$|^$'
      ;;
   esac
}


_nm_global_undefined_names()
{
   local filename="$1"

   case "${MULLE_UNAME}" in
      darwin)
         exekutor ${NM} -g -u -j "${filename}" | \
            egrep -v ':$|^$' | \
            sed 's/^_//'
      ;;

      mingw*)
         # -p no sort, -P posix style (name first)
         exekutor ${NM} -g --undefined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | grep -v '@_' \
            | sed 's/^__imp_//' \
            | sed 's/@[0-9][0-9]*//' \
            | sed 's/^_//'  \
            | egrep -v ':$|^$'
      ;;

      linux|*)
         # -p no sort, -P posix style (name first)
         exekutor ${NM} -g --undefined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | egrep -v ':$|^$'
      ;;
   esac
}


nm_global_defined_names()
{
   _nm_global_defined_names "$@" | sed '/^$/d' | sort -u
}


nm_global_undefined_names()
{
   _nm_global_undefined_names "$@" | sed '/^$/d' | sort -u
}


emit_enqueue()
{
   cat <<EOF
#define PSAPI_VERSION 1
#include <windows.h>
#include <psapi.h>
#include <stdio.h>


static void   nop( void *unused)
{
}


__declspec( dllexport)
void   mulle_objc_loadinfo_unfailingenqueue( void *info)
{
   static void  (*__mulle_objc_list_callback)( void *);

   if( ! __mulle_objc_list_callback)
   {
      __mulle_objc_list_callback = (void (*)( void *)) GetProcAddress( (HMODULE) 0, "__mulle_objc_list_callback");

      if( ! __mulle_objc_list_callback)
      {
         __mulle_objc_list_callback = nop;
         fprintf( stderr, "mulle-objc-lista: fail! Could not find __mulle_objc_list_callback\n");
         return;
      }
   }

   (*__mulle_objc_list_callback)( info);
}
EOF
}


emit()
{
   local symbol="$1"

   case "${MULLE_UNAME}" in
      mingw)
         case "$1" in
            __imp__*)
            ;;

            *)
               echo "${EXTERN_GLOBAL_PREFIX}void  ${EXTERN_SYMBOL_PREFIX}${symbol}() {}"
            ;;
         esac
         echo "void  ${symbol}() {}"
      ;;

      *)
         echo "${EXTERN_GLOBAL_PREFIX}void  ${EXTERN_SYMBOL_PREFIX}${symbol}() {}"
         if [ ! -z "${EXTERN_GLOBAL_PREFIX}" -o ! -z "${EXTERN_SYMBOL_PREFIX}" ]
         then
            echo "void  ${symbol}() {}"
         fi
      ;;
   esac
}


emit_no_return()
{
   local symbol="$1"

   case "${MULLE_UNAME}" in
      mingw)
         case "$1" in
            __imp__*)
            ;;

            *)
               echo "${EXTERN_GLOBAL_PREFIX}void  ${EXTERN_SYMBOL_PREFIX}${symbol}() {}"
            ;;
         esac
         echo "__attribute__(( noreturn)) void  ${symbol}() { while(1); }"
      ;;

      *)
         echo "${EXTERN_GLOBAL_PREFIX}__attribute__(( noreturn)) void  ${EXTERN_SYMBOL_PREFIX}${symbol}() { while(1); }"
         if [ ! -z "${EXTERN_GLOBAL_PREFIX}" -o ! -z "${EXTERN_SYMBOL_PREFIX}" ]
         then
            echo "__attribute__(( noreturn)) void  ${symbol}() { while(1); }"
         fi
      ;;
   esac
}



#
# read symbols from .a file, figure out the ones that we need to "spoof"
# so that we can dummy link it
#
create_undefined_linkage_c()
{
   log_entry "create_undefined_linkage_c" "$@"

   local infile="$1"
   local tmpdir="$2"

   local undefined_symbols

   # global, defined
   nm_global_defined_names "${infile}" | \
      redirect_exekutor "${tmpdir}/defined_globals" sort -u

   # fgrep behaves funny with empty files
   if [ -z "`cat ${tmpdir}/defined_globals`" ]
   then
      # remove defined globals from undefined
      nm_global_undefined_names "${infile}" | \
         redirect_exekutor "${tmpdir}/undefined_globals" cat
   else
      nm_global_undefined_names "${infile}" | \
         redirect_exekutor "${tmpdir}/undefined_globals" \
            fgrep -v -f "${tmpdir}/defined_globals"
   fi

   local i

   #
   # if we redefine standard library symbols, the compiler is not
   # happy so we copy the definitions here
   #
   # egrep '^LIBBUILTIN' mulle-clang/include/clang/Basic/Builtins.def | \
   #  sed s'/^LIBBUILTIN(\([^,]*\).*$/\1/' | \
   #  sort | \
   #  sed s'/\(.*\)/         \1) ;;/'
   #
   for i in `exekutor cat "${tmpdir}/undefined_globals"`
   do
      case $i in
         "") ;;
#         NSLog) ;;
#         NSLogv) ;;

#
# some windows stuff
#
#
         __security_cookie|_errno|__errno|perror|_perror|_wassert|atoi|_atoi|getenv|_getenv|__acrt_iob_func|free|_free|atexit|_atexit|_beginthreadex|_endthreadex)
            case "${MULLE_UNAME}" in
               mingw)
               ;;

               *)
                  emit "$i"
               ;;
            esac
         ;;

         exit|_exit)
            case "${MULLE_UNAME}" in
               mingw)
               ;;

               *)
                  emit_no_return "$i"
               ;;
            esac
         ;;

         abort|_abort)
            case "${MULLE_UNAME}" in
               mingw)
               ;;

               *)
               # ignore
               ;;
            esac
         ;;

#
# Clang stuff
#
         _Block_object_assign) ;;
         _Block_object_dispose) ;;
         _Exit) ;;
         __cospi) ;;
         __cospif) ;;
         __exp10) ;;
         __exp10f) ;;
         __finite) ;;
         __finitef) ;;
         __finitel) ;;
         __sigsetjmp) ;;
         __sinpi) ;;
         __sinpif) ;;
         __tanpi) ;;
         __tanpif) ;;
         _byteswap_uint64) ;;
         _byteswap_ulong) ;;
         _byteswap_ushort) ;;
         _longjmp) ;;
         _setjmp) ;;
         _setjmpex) ;;
         abs) ;;
         acos) ;;
         acosf) ;;
         acosh) ;;
         acoshf) ;;
         acoshl) ;;
         acosl) ;;
         alloca) ;;
         asin) ;;
         asinf) ;;
         asinh) ;;
         asinhf) ;;
         asinhl) ;;
         asinl) ;;
         atan) ;;
         atan2) ;;
         atan2f) ;;
         atan2l) ;;
         atanf) ;;
         atanh) ;;
         atanhf) ;;
         atanhl) ;;
         atanl) ;;
         bzero) ;;
         cabs) ;;
         cabsf) ;;
         cabsl) ;;
         cacos) ;;
         cacosf) ;;
         cacosh) ;;
         cacoshf) ;;
         cacoshl) ;;
         cacosl) ;;
         calloc) ;;
         carg) ;;
         cargf) ;;
         cargl) ;;
         casin) ;;
         casinf) ;;
         casinh) ;;
         casinhf) ;;
         casinhl) ;;
         casinl) ;;
         catan) ;;
         catanf) ;;
         catanh) ;;
         catanhf) ;;
         catanhl) ;;
         catanl) ;;
         cbrt) ;;
         cbrtf) ;;
         cbrtl) ;;
         ccos) ;;
         ccosf) ;;
         ccosh) ;;
         ccoshf) ;;
         ccoshl) ;;
         ccosl) ;;
         ceil) ;;
         ceilf) ;;
         ceill) ;;
         cexp) ;;
         cexpf) ;;
         cexpl) ;;
         cimag) ;;
         cimagf) ;;
         cimagl) ;;
         clog) ;;
         clogf) ;;
         clogl) ;;
         conj) ;;
         conjf) ;;
         conjl) ;;
         copysign) ;;
         copysignf) ;;
         copysignl) ;;
         cos) ;;
         cosf) ;;
         cosh) ;;
         coshf) ;;
         coshl) ;;
         cosl) ;;
         cpow) ;;
         cpowf) ;;
         cpowl) ;;
         cproj) ;;
         cprojf) ;;
         cprojl) ;;
         creal) ;;
         crealf) ;;
         creall) ;;
         csin) ;;
         csinf) ;;
         csinh) ;;
         csinhf) ;;
         csinhl) ;;
         csinl) ;;
         csqrt) ;;
         csqrtf) ;;
         csqrtl) ;;
         ctan) ;;
         ctanf) ;;
         ctanh) ;;
         ctanhf) ;;
         ctanhl) ;;
         ctanl) ;;
         erf) ;;
         erfc) ;;
         erfcf) ;;
         erfcl) ;;
         erff) ;;
         erfl) ;;
         exp) ;;
         exp2) ;;
         exp2f) ;;
         exp2l) ;;
         expf) ;;
         expl) ;;
         expm1) ;;
         expm1f) ;;
         expm1l) ;;
         fabs) ;;
         fabsf) ;;
         fabsl) ;;
         fdim) ;;
         fdimf) ;;
         fdiml) ;;
         finite) ;;
         finitef) ;;
         finitel) ;;
         floor) ;;
         floorf) ;;
         floorl) ;;
         fma) ;;
         fmaf) ;;
         fmal) ;;
         fmax) ;;
         fmaxf) ;;
         fmaxl) ;;
         fmin) ;;
         fminf) ;;
         fminl) ;;
         fmod) ;;
         fmodf) ;;
         fmodl) ;;
         fprintf) ;;
         frexp) ;;
         frexpf) ;;
         frexpl) ;;
         fscanf) ;;
         getcontext) ;;
         hypot) ;;
         hypotf) ;;
         hypotl) ;;
         ilogb) ;;
         ilogbf) ;;
         ilogbl) ;;
         index) ;;
         isalnum) ;;
         isalpha) ;;
         isblank) ;;
         iscntrl) ;;
         isdigit) ;;
         isgraph) ;;
         islower) ;;
         isprint) ;;
         ispunct) ;;
         isspace) ;;
         isupper) ;;
         isxdigit) ;;
         labs) ;;
         ldexp) ;;
         ldexpf) ;;
         ldexpl) ;;
         lgamma) ;;
         lgammaf) ;;
         lgammal) ;;
         llabs) ;;
         llrint) ;;
         llrintf) ;;
         llrintl) ;;
         llround) ;;
         llroundf) ;;
         llroundl) ;;
         log) ;;
         log10) ;;
         log10f) ;;
         log10l) ;;
         log1p) ;;
         log1pf) ;;
         log1pl) ;;
         log2) ;;
         log2f) ;;
         log2l) ;;
         logb) ;;
         logbf) ;;
         logbl) ;;
         logf) ;;
         logl) ;;
         longjmp) ;;
         lrint) ;;
         lrintf) ;;
         lrintl) ;;
         lround) ;;
         lroundf) ;;
         lroundl) ;;
         malloc) ;;
         memchr) ;;
         memcmp) ;;
         memcpy) ;;
         memmove) ;;
         memset) ;;
         modf) ;;
         modff) ;;
         modfl) ;;
         nan) ;;
         nanf) ;;
         nanl) ;;
         nearbyint) ;;
         nearbyintf) ;;
         nearbyintl) ;;
         nextafter) ;;
         nextafterf) ;;
         nextafterl) ;;
         nexttoward) ;;
         nexttowardf) ;;
         nexttowardl) ;;
         objc_assign_global) ;;
         objc_assign_ivar) ;;
         objc_assign_strongCast) ;;
         objc_assign_weak) ;;
         objc_enumerationMutation) ;;
         objc_exception_extract) ;;
         objc_exception_match) ;;
         objc_exception_throw) ;;
         objc_exception_try_enter) ;;
         objc_exception_try_exit) ;;
         objc_getClass) ;;
         objc_getMetaClass) ;;
         objc_msgSend) ;;
         objc_msgSendSuper) ;;
         objc_msgSendSuper_stret) ;;
         objc_msgSend_fp2ret) ;;
         objc_msgSend_fpret) ;;
         objc_msgSend_stret) ;;
         objc_read_weak) ;;
         objc_sync_enter) ;;
         objc_sync_exit) ;;
         pow) ;;
         powf) ;;
         powl) ;;
         printf) ;;
         qsetjmp) ;;
         realloc) ;;
         remainder) ;;
         remainderf) ;;
         remainderl) ;;
         rindex) ;;
         rint) ;;
         rintf) ;;
         rintl) ;;
         round) ;;
         roundf) ;;
         roundl) ;;
         savectx) ;;
         scalbln) ;;
         scalblnf) ;;
         scalblnl) ;;
         scalbn) ;;
         scalbnf) ;;
         scalbnl) ;;
         scanf) ;;
         setjmp) ;;
         setjmp_syscall) ;;
         siglongjmp) ;;
         sigsetjmp) ;;
         sin) ;;
         sinf) ;;
         sinh) ;;
         sinhf) ;;
         sinhl) ;;
         sinl) ;;
         snprintf) ;;
         sprintf) ;;
         sqrt) ;;
         sqrtf) ;;
         sqrtl) ;;
         sscanf) ;;
         stpcpy) ;;
         stpncpy) ;;
         strcasecmp) ;;
         strcat) ;;
         strchr) ;;
         strcmp) ;;
         strcpy) ;;
         strcspn) ;;
         strdup) ;;
         strerror) ;;
         strlcat) ;;
         strlcpy) ;;
         strlen) ;;
         strncasecmp) ;;
         strncat) ;;
         strncmp) ;;
         strncpy) ;;
         strndup) ;;
         strpbrk) ;;
         strrchr) ;;
         strspn) ;;
         strstr) ;;
         strtok) ;;
         strxfrm) ;;
         tan) ;;
         tanf) ;;
         tanh) ;;
         tanhf) ;;
         tanhl) ;;
         tanl) ;;
         tgamma) ;;
         tgammaf) ;;
         tgammal) ;;
         tolower) ;;
         toupper) ;;
         trunc) ;;
         truncf) ;;
         truncl) ;;
         vfork) ;;
         vfprintf) ;;
         vfscanf) ;;
         vprintf) ;;
         vscanf) ;;
         vsnprintf) ;;
         vsprintf) ;;
         vsscanf) ;;
         wcschr) ;;
         wcscmp) ;;
         wcslen) ;;
         wcsncmp) ;;
         wmemchr) ;;
         wmemcmp) ;;


#         mulle_objc_loadinfo_unfailingenqueue) ;;
#         ;;

         mulle_objc_loadinfo_unfailingenqueue)
            case "${MULLE_UNAME}" in
               mingw)
               ;;

               *)
                  emit "$i"
               ;;
            esac
         ;;

         *)
            emit "$i"
         ;;
      esac
   done
}


emit_dllmain()
{
   return 0

   echo '#define DLL_PROCESS_ATTACH      1
#define DLL_THREAD_ATTACH       2
#define DLL_THREAD_DETACH       3
#define DLL_PROCESS_DETACH      0


int __stdcall _DllMainCRTStartup( int hModule,
                                  long ul_reason_for_call,
                                  void *lpReserved)
{
   extern int __stdcall _CRT_INIT( int hinstDLL, long fdwReason, void *lpReserved);

   if( ul_reason_for_call == DLL_PROCESS_ATTACH || ul_reason_for_call == DLL_THREAD_ATTACH)
      _CRT_INIT( hModule, ul_reason_for_call, lpReserved);
   return 1;
}'


}

#
# create a  .o file with (almost) all the symbols that
# are missing from "$1"
#
create_undefined_linkage()
{
   log_entry "create_undefined_linkage" "$@"

   local infile="$1"
   local outfile="$2"
   local tmpdir="$3"

   local text

   text="`create_undefined_linkage_c "${infile}" "${tmpdir}"`" || fail "Creating undefined C linkage failed"
   if [ -z "${text}" ]
   then
      log_fluff "No undefined symbols to spoof for \"${infile}\""
      return 1
   fi

   local prelude

   case "${MULLE_UNAME}" in
      mingw)
         prelude="`emit_dllmain`"
         text="${prelude}
${text}"
      ;;
   esac

   local cfile
   local folder

   folder="`dirname -- "${outfile}"`"
   cfile="${folder}/`basename -- "${outfile}" .o`".c
   redirect_exekutor "${cfile}" echo "${text}"

   local cflags

   cflags="`shlib_cflags`"

   log_fluff "Compile undefined symbol linkage \"${cfile}\"..."
   exekutor ${CC} ${cflags} -c -o "${outfile}" "${cfile}" || fail "Compiling undefined symbol linkage failed"
}


# always running in tmp for mingw only
create_mingw_aux_linkage()
{
   log_entry "create_mingw_aux_linkage" "$@"

   local outfile="$1"

   local auxfile

   auxfile="`basename -- "${outfile}" .o`".c
   redirect_exekutor "${auxfile}" emit_enqueue

   local cflags

   cflags="`shlib_cflags`"

   log_fluff "Compile auxiliary linkage \"${auxfile}\"..."
   exekutor ${CC} ${cflags} -c -o "${outfile}" "${auxfile}" || exit 1
}


_create_shlib()
{
   log_entry "_create_shlib" "$@"

   local shlib="$1"
   local library="$2"
   local undefined="$3"
   local tmpdir="$4"

   local files
   local ldflags
   local wholelibrary
   local libraryname

   ldflags="`shlib_ldflags`"

   case "${MULLE_UNAME}" in
      mingw*)
         exekutor cp "${library}" "${tmpdir}"
         (
            exekutor cd "${tmpdir}" || exit 1

            libraryname="`fast_basename "${library}"`"
            wholelibrary="`shlib_load_all_library "${libraryname}"`" || exit 1

            files="${wholelibrary}"

            create_mingw_aux_linkage "auxiliary.o" || exit 1
            files="${files} auxiliary.o" &&

            if create_undefined_linkage "${library}" "${undefined}" "."
            then
               files="`basename -- "${undefined}"` ${files}"
            fi
            shlib="`basename -- "${shlib}"`"

            eval_exekutor "'${LD}'" ${ldflags} ${files} ${LIBRARIES} -nologo "-OUT:'${shlib}'"
         ) >&2 || exit 1
         return
      ;;
   esac

   # just a bit faster than mingw needing to copy the library
   # for path reasons
   wholelibrary="`shlib_load_all_library "${library}"`"
   files="${wholelibrary}"

   if create_undefined_linkage "${library}" "${undefined}" "${tmpdir}"
   then
      files="${undefined} ${files}"
   fi
   eval_exekutor "'${LD}'" ${ldflags} ${files} ${LIBRARIES} -o "'${shlib}'" || fail "Linking temporary shared library failed"
}


#
# create a shared library for the .a file
#
create_shlib()
{
   log_entry "create_shlib" "$@"

   local library="$1"
   local directory="$2"

   local name
   local undefined
   local files
   local shlib

   local ext
   local ldflags

   ext="`shlib_extension`"

   name="`basename "${library}" .a`"
   undefined="${directory}/${name}.undef.o"
   shlib="${directory}/${name}.${ext}"

   log_fluff "Create shlib \"${shlib}\"..."
   _create_shlib "${shlib}" "${library}" "${undefined}" "${directory}"

   rexekutor echo "${shlib}"
}


main()
{
   # your code follows here

   local cmdline
   local library
   local shlib

   local OPTION_CONFIGURATION="Release"

   cmdline="`command -v mulle-objc-list`"
   if [ -z "${cmdline}" ]
   then
      fail "mulle-objc-list not in PATH"
   fi
   cmdline="'${cmdline}'"

   #
   # collect options for mulle-objc-list
   #
   while [ $# -gt 1 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -c|--configuration)
            shift

            OPTION_CONFIGURATION="$1"
            shift
            continue
         ;;
      esac

      cmdline="${cmdline} '$1'"

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   if [ "${MULLE_FLAG_LOG_FLUFF}" = "YES" ]
   then
      cmdline="${cmdline} '-v'"
   fi

   library="$1"
   if [ ! -f "${library}" ]
   then
      usage
   fi

   setup_cc_environment

   log_verbose "Create shared libs (if needed)..."

   local directory

   directory="`make_tmp_directory "lista"`"
   shlib="`create_shlib "${library}" "${directory}"`" || exit 1
   cmdline="${cmdline} '${shlib}'"

   log_verbose "Run mulle-objc-list on shared library \"${shlib}\"..."

   eval_exekutor ${cmdline}
}



_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
}

#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="`tr '\\' '/' <<< "${PATH}"`"
   ;;
esac

_init "$@"
main "$@"
