#! /usr/bin/env mulle-bash
#
# shellcheck shell=bash
# shellcheck disable=SC2236
# shellcheck disable=SC2120
# shellcheck disable=SC2166
# shellcheck disable=SC2034
# shellcheck disable=SC2006
# shellcheck disable=SC1090
# shellcheck disable=SC1091
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
# this script unpacks an .a file and creates a list of defined methods
# for each .o file
#
[ "${TRACE}" = "YES" -o "${MULLE_OBJC_LISTA_TRACE}" = "YES" ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION=0.9.1



usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [options] <library>

   Use mulle-objc-lista on a static library to create ObjC dependencies
   information and other information types.

EOF
   "${MULLE_OBJC_LIST##*/}" -U

   exit 1
}


setup_cc_environment()
{
   log_entry "setup_cc_environment" "$@"

   case "${MULLE_UNAME}" in
      windows|mingw*)
         CC="mulle-clang-cl${MULLE_EXE_EXTENSION}"
         LD="link${MULLE_EXE_EXTENSION}"
         NM="mulle-nm${MULLE_EXE_EXTENSION}"
         EXTERN_GLOBAL_PREFIX="__declspec( dllexport) "
         EXTERN_SYMBOL_PREFIX="__imp__"

         case "${OPTION_CONFIGURATION}" in
            Release)
               # MT
               #LIBRARIES="kernel32.lib libcmt.lib libvcruntime.lib libucrt.lib"
               # MD (kernel32.lib)
               LIBRARIES="kernel32.lib msvcrt.lib ucrt.lib vcruntime.lib psapi.lib"
            ;;

            Debug)
               # MTd
               #LIBRARIES="kernel32.lib libcmtd.lib libvcruntimed.lib libucrtd.lib"
               # MDd
               LIBRARIES="kernel32.lib msvcrtd.lib ucrtd.lib vcruntimed.lib psapi.lib"
            ;;
         esac


         # find the ms linker
         .foreachpath item in $PATH
         .do
            if [ -x "${item}/cl.exe" -a -x "${item}/link.exe" ]
            then
               LD="${item}/link.exe"
               .break
            fi
         .done
      ;;

      *)
         CC="mulle-clang"
         LD="mulle-clang"
         NM="nm"  # will do
      ;;
   esac

   if [ -z "`command -v "${CC}"`" ]
   then
      fail "${CC} not in PATH"
   fi
   if [ -z "`command -v "${LD}"`" ]
   then
      fail "${LD} not in PATH"
   fi
   if [ -z "`command -v "${NM}"`" ]
   then
      fail "${NM} not in PATH"
   fi
}


r_shlib_extension()
{
   log_entry "r_shlib_extension" "$@"

   case "${MULLE_UNAME}" in
      darwin)
         RVAL="dylib"
      ;;

      windows|mingw*)
         RVAL="dll"
      ;;

      *)
         RVAL="so"
       ;;
   esac
}


r_shlib_cflags()
{
   log_entry "r_shlib_cflags" "$@"

   case "${MULLE_UNAME}" in
      darwin)
         RVAL="-fno-common"
      ;;

      windows|mingw*)
         case "${OPTION_CONFIGURATION}" in
            Release)
               # MD (kernel32.lib)
               RVAL="-MD"
            ;;

            Debug)
               # MDd
               RVAL="-MDd"
            ;;
         esac

       ;;

      *)
         RVAL="-fPIC -fno-common"
      ;;
   esac
}


r_macos_sdk_path()
{
   log_entry "r_macos_sdk_path" "$@"

   RVAL="`rexekutor xcrun --show-sdk-path 2> /dev/null`"
   RVAL="${RVAL:-/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk}"
}


r_shlib_ldflags()
{
   log_entry "r_shlib_ldflags" "$@"

   case "${MULLE_UNAME}" in
      darwin)
         local usr_lib 

         r_macos_sdk_path 
         r_filepath_concat "${RVAL}" "/usr/lib"
         usr_lib="${RVAL}"

         RVAL="-dynamiclib -Os -flat_namespace -undefined suppress -L'${usr_lib}'"
      ;;

      windows|mingw)
         RVAL="-DLL" # "-NODEFAULTLIB"
      ;;

      *)
         RVAL="-shared"
      ;;
   esac
}


r_shlib_load_all_library()
{
   log_entry "r_shlib_load_all_library" "$@"

   local library="$1"

   case "${MULLE_UNAME}" in
      darwin)
         RVAL="'${library}' -force_load '${library}'"
      ;;

      windows|mingw)
         RVAL="'-WHOLEARCHIVE:${library}'"
      ;;

      *)
         RVAL="-Wl,--whole-archive '${library}' -Wl,--no-whole-archive"
      ;;
   esac
}


_nm_global_defined_names()
{
   log_entry "_nm_global_defined_names" "$@"

   local filename="$1"

   case "${MULLE_UNAME}" in
      darwin)
         exekutor "${NM}" -g -U -j "${filename}" \
            | egrep -v ':$|^$' \
            | sed 's/^_//'
      ;;

      windows|mingw*)
         #
         # -p no sort, -P posix style (name first)
         # get rid of ??_C@_07DPFPOHBA@atexit?3?$AA@ and stuff like that
         #
         exekutor "${NM}" -g --defined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | grep -v '@_' \
            | sed 's/^__imp_//' \
            | sed 's/@[0-9][0-9]*//' \
            | sed 's/^_//'  \
            | egrep -v ':$|^$'
      ;;

      linux|*)
         # -p no sort, -P posix style (name first)
         exekutor "${NM}" -g --defined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | egrep -v ':$|^$'
      ;;
   esac
}


_nm_global_undefined_names()
{
   log_entry "_nm_global_undefined_names" "$@"

   local filename="$1"

   case "${MULLE_UNAME}" in
      darwin)
         exekutor "${NM}" -g -u -j "${filename}" \
            | egrep -v ':$|^$' \
            | sed 's/^_//'
      ;;

      windows|mingw*)
         # -p no sort, -P posix style (name first)
         exekutor "${NM}" -g --undefined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | grep -v '@_' \
            | sed 's/^__imp_//' \
            | sed 's/@[0-9][0-9]*//' \
            | sed 's/^_//'  \
            | egrep -v ':$|^$'
      ;;

      linux|*)
         # -p no sort, -P posix style (name first)
         exekutor "${NM}" -g --undefined-only -p -P "${filename}" \
            | awk '{ print $1} ' \
            | egrep -v ':$|^$'
      ;;
   esac
}


nm_global_defined_names()
{
   log_entry "nm_global_defined_names" "$@"

   _nm_global_defined_names "$@" | sed '/^$/d' | sort -u
}


nm_global_undefined_names()
{
   log_entry "nm_global_undefined_names" "$@"

   _nm_global_undefined_names "$@" | sed '/^$/d' | sort -u
}


emit_enqueue()
{
   log_entry "emit_enqueue" "$@"

   cat <<EOF
#define PSAPI_VERSION 1
#include <windows.h>
#include <psapi.h>
#include <stdio.h>


static void   nop( void *unused)
{
}


__declspec( dllexport)
void   mulle_objc_loadinfo_enqueue_nofail( void *info)
{
   static void  (*__mulle_objc_list_callback)( void *);

   if( ! __mulle_objc_list_callback)
   {
      __mulle_objc_list_callback = (void (*)( void *)) GetProcAddress( (HMODULE) 0, "__mulle_objc_list_callback");

      if( ! __mulle_objc_list_callback)
      {
         __mulle_objc_list_callback = nop;
         fprintf( stderr, "mulle-objc-lista: fail! Could not find __mulle_objc_list_callback\n");
         return;
      }
   }

   (*__mulle_objc_list_callback)( info);
}
EOF
}


emit()
{
   log_entry "emit" "$@"

   local symbol="$1"

   case "${MULLE_UNAME}" in
      windows|mingw)
         case "$1" in
            __imp__*)
               log_debug "ignore imp $i"
            ;;

            *)
               echo "${EXTERN_GLOBAL_PREFIX}void  ${EXTERN_SYMBOL_PREFIX}${symbol}() {}"
            ;;
         esac
         echo "void  ${symbol}() {}"
      ;;

      *)
         echo "${EXTERN_GLOBAL_PREFIX}void  ${EXTERN_SYMBOL_PREFIX}${symbol}() {}"
         if [ ! -z "${EXTERN_GLOBAL_PREFIX}" -o ! -z "${EXTERN_SYMBOL_PREFIX}" ]
         then
            echo "void  ${symbol}() {}"
         fi
      ;;
   esac
}


emit_no_return()
{
   log_entry "emit_no_return" "$@"

   local symbol="$1"

   case "${MULLE_UNAME}" in
      windows|mingw)
         case "$1" in
            __imp__*)
               log_debug "ignore imp $i"
            ;;

            *)
               echo "${EXTERN_GLOBAL_PREFIX}void  ${EXTERN_SYMBOL_PREFIX}${symbol}() {}"
            ;;
         esac
         echo "__attribute__(( noreturn)) void  ${symbol}() { while(1); }"
      ;;

      *)
         echo "${EXTERN_GLOBAL_PREFIX}__attribute__(( noreturn)) void  ${EXTERN_SYMBOL_PREFIX}${symbol}() { while(1); }"
         if [ ! -z "${EXTERN_GLOBAL_PREFIX}" -o ! -z "${EXTERN_SYMBOL_PREFIX}" ]
         then
            echo "__attribute__(( noreturn)) void  ${symbol}() { while(1); }"
         fi
      ;;
   esac
}

# also change in mulle-objc-unarchive
# llrint:llrintf:llrintl temporarily removed
CLANG_FUNCTIONS="_Block_object_assign:_Block_object_dispose:_Exit:__cospi:\
__cospif:__exp10:__exp10f:__finite:__finitef:__finitel:__sigsetjmp:__sinpi:\
__sinpif:__tanpi:__tanpif:_byteswap_uint64:_byteswap_ulong:_byteswap_ushort:\
_longjmp:_setjmp:_setjmpex:abs:acos:acosf:acosh:acoshf:acoshl:acosl:alloca:\
asin:asinf:asinh:asinhf:asinhl:asinl:atan:atan2:atan2f:atan2l:atanf:atanh:\
atanhf:atanhl:atanl:bzero:cabs:cabsf:cabsl:cacos:cacosf:cacosh:cacoshf:\
cacoshl:cacosl:calloc:carg:cargf:cargl:casin:casinf:casinh:casinhf:casinhl:\
casinl:catan:catanf:catanh:catanhf:catanhl:catanl:cbrt:cbrtf:cbrtl:ccos:ccosf:\
ccosh:ccoshf:ccoshl:ccosl:ceil:ceilf:ceill:cexp:cexpf:cexpl:cimag:cimagf:\
cimagl:clog:clogf:clogl:conj:conjf:conjl:copysign:copysignf:copysignl:cos:\
cosf:cosh:coshf:coshl:cosl:cpow:cpowf:cpowl:cproj:cprojf:cprojl:creal:crealf:\
creall:csin:csinf:csinh:csinhf:csinhl:csinl:csqrt:csqrtf:csqrtl:ctan:ctanf:\
ctanh:ctanhf:ctanhl:ctanl:erf:erfc:erfcf:erfcl:erff:erfl:exp:exp2:exp2f:exp2l:\
expf:expl:expm1:expm1f:expm1l:fabs:fabsf:fabsl:fdim:fdimf:fdiml:finite:\
finitef:finitel:floor:floorf:floorl:fma:fmaf:fmal:fmax:fmaxf:fmaxl:fmin:fminf:\
fminl:fmod:fmodf:fmodl:fprintf:frexp:frexpf:frexpl:fscanf:getcontext:hypot:\
hypotf:hypotl:ilogb:ilogbf:ilogbl:index:isalnum:isalpha:isblank:iscntrl:\
isdigit:isgraph:islower:isprint:ispunct:isspace:isupper:isxdigit:labs:ldexp:\
ldexpf:ldexpl:lgamma:lgammaf:lgammal:llabs:llround:\
llroundf:llroundl:log:log10:log10f:log10l:log1p:log1pf:log1pl:log2:log2f:\
log2l:logb:logbf:logbl:logf:logl:longjmp:lrint:lrintf:lrintl:lround:lroundf:\
lroundl:malloc:memchr:memcmp:memcpy:memmove:memset:modf:modff:modfl:nan:nanf:\
nanl:nearbyint:nearbyintf:nearbyintl:nextafter:nextafterf:nextafterl:\
nexttoward:nexttowardf:nexttowardl:objc_assign_global:objc_assign_ivar:\
objc_assign_strongCast:objc_assign_weak:objc_enumerationMutation:\
objc_exception_extract:objc_exception_match:objc_exception_throw:\
objc_exception_tryenter:objc_exception_tryexit:objc_getClass:\
objc_getMetaClass:objc_msgSend:objc_msgSendSuper:objc_msgSendSuper_stret:\
objc_msgSend_fp2ret:objc_msgSend_fpret:objc_msgSend_stret:objc_read_weak:\
objc_sync_enter:objc_sync_exit:pow:powf:powl:printf:qsetjmp:realloc:remainder:\
remainderf:remainderl:rindex:rint:rintf:rintl:round:roundf:roundl:savectx:\
scalbln:scalblnf:scalblnl:scalbn:scalbnf:scalbnl:scanf:setjmp:setjmp_syscall:\
siglongjmp:sigsetjmp:sin:sinf:sinh:sinhf:sinhl:sinl:snprintf:sprintf:sqrt:\
sqrtf:sqrtl:sscanf:stpcpy:stpncpy:strcasecmp:strcat:strchr:strcmp:strcpy:\
strcspn:strdup:strerror:strlcat:strlcpy:strlen:strncasecmp:strncat:strncmp:\
strncpy:strndup:strpbrk:strrchr:strspn:strstr:strtok:strxfrm:tan:tanf:tanh:\
tanhf:tanhl:tanl:tgamma:tgammaf:tgammal:tolower:toupper:trunc:truncf:truncl:\
vfork:vfprintf:vfscanf:vprintf:vscanf:vsnprintf:vsprintf:vsscanf:wcschr:\
wcscmp:wcslen:wcsncmp:wmemchr:wmemcmp"


mulle_clang_library_functions()
{
   echo "struct i_am_bogus;"

   .foreachpath name in ${CLANG_FUNCTIONS}
   .do
      echo "void   ${name}( struct i_am_bogus *p) {}"
   .done
}


print_mulle_clang_builtin_case()
{
   mulle_clang_library_functions | \
      "${CC}" -cc1 -fsyntax-only -x c 2>&1 | \
      sed -n "s/.*'\\(.*\\)' is a builtin with .*/      \\1) return 0 ;;/p"
}


print_mulle_clang_builtin_function()
{
   cat <<EOF
_is_clang_builtin()
{
   case "\$1" in
EOF

   print_mulle_clang_builtin_case

   cat <<EOF
   esac

   return 1
}
EOF
}


is_clang_builtin()
{
   if [ -z "${_is_clang_builtin_defined}" ]
   then
      eval "`print_mulle_clang_builtin_function`" || exit 1
      _is_clang_builtin_defined="YES"
   fi

   _is_clang_builtin "$@"
}


# also change in mulle-objc-unarchive

CLANG_FUNCTIONS="_GLOBAL_OFFSET_TABLE_"

crt_functions()
{
   echo "struct i_am_bogus;"

   .foreachpath name in ${CRT_FUNCTIONS}
   .do
      echo "void   ${name}( struct i_am_bogus *p) {}"
   .done
}


print_crt_function_case()
{
   crt_functions | \
      "${CC}" -cc1 -fsyntax-only -x c 2>&1 | \
      sed -n "s/.*'\\(.*\\)' is a builtin with .*/      \\1) return 0 ;;/p"
}


print_crt_function()
{
   cat <<EOF
_is_crt_function()
{
   case "\$1" in
EOF

   print_crt_function_case

   cat <<EOF
   esac

   return 1
}
EOF

}


is_crt_symbol()
{
   if [ -z "${is_crt_function_defined}" ]
   then
      eval "`print_crt_function`" || exit 1
      is_crt_function_defined="YES"
   fi

   _is_crt_function "$@"
}



#
# read symbols from .a file, figure out the ones that we need to "spoof"
# so that we can dummy link it
#
create_undefined_linkage_c()
{
   log_entry "create_undefined_linkage_c" "$@"

   local infile="$1"
   local tmpdir="$2"

   # global, defined
   nm_global_defined_names "${infile}" \
      | redirect_exekutor "${tmpdir}/defined_globals" cat

   # fgrep behaves funny with empty files
   if [ -z "`cat "${tmpdir}/defined_globals" `" ]
   then
      # remove defined globals from undefined
      nm_global_undefined_names "${infile}" \
         | redirect_exekutor "${tmpdir}/undefined_globals" cat
   else
      case "${MULLE_UNAME}" in
         darwin)
            # on MacOS big sur fgrep -x is broken, so we need to
            # use regexpr here. paranoid about the incoming symbols
            # so escape
            cat "${tmpdir}/defined_globals" \
               | sed -e 's/\[/\\[/g' \
                     -e 's/\]/\\]/g' \
                     -e 's/\//\\\//g' \
                     -e 's/\$/\\$/g' \
                     -e 's/\*/\\*/g' \
                     -e 's/\./\\./g' \
                     -e 's/\^/\\^/g' \
                     -e 's/\(.*\)/^\1$/' \
               | redirect_exekutor "${tmpdir}/defined_globals_regexp" cat

            nm_global_undefined_names "${infile}" \
               | redirect_exekutor "${tmpdir}/undefined_globals" egrep \
                                       -v -f "${tmpdir}/defined_globals_regexp"
         ;;

         *)
            nm_global_undefined_names "${infile}" \
               | redirect_exekutor "${tmpdir}/undefined_globals" fgrep \
                                          -v -x -f "${tmpdir}/defined_globals"
         ;;
      esac
   fi

   local i

   #
   # if we redefine standard library symbols, the compiler is not
   # happy so we copy the definitions here
   #
   # egrep '^LIBBUILTIN' mulle-clang/include/clang/Basic/Builtins.def | \
   #  sed s'/^LIBBUILTIN(\([^,]*\).*$/\1/' | \
   #  sort | \
   #  sed s'/\(.*\)/         \1) ;;/'
   #
   for i in `rexekutor cat "${tmpdir}/undefined_globals"`
   do
      case $i in
         "")
         ;;

#         NSLog) ;;
#         NSLogv) ;;
#
# some windows stuff
# probably need to add a lot more which is in "ucrt"
#
         __security_cookie|_errno|__errno|perror|_perror|_wassert|atoi|_atoi\
|getenv|_getenv|__acrt_iob_func|free|_free|atexit|_atexit|_beginthreadex\
|_endthreadex|fclose|fopen|strncmp|__stdio_common_vsprintf|__stdio_common_vfprintf)
            case "${MULLE_UNAME}" in
               windows|mingw)
                  log_debug "ignore $i"
               ;;

               *)
                  emit "$i"
               ;;
            esac
         ;;

         # don't want to clobber dlsym, which we need
         dlsym|_dlsym)
            log_debug "ignore $i"
         ;;

         exit|_exit)
            case "${MULLE_UNAME}" in
               windows|mingw)
                  log_debug "ignore $i"
               ;;

               *)
                  emit_no_return "$i"
               ;;
            esac
         ;;

         abort|_abort)
            case "${MULLE_UNAME}" in
               windows|mingw)
                  log_debug "ignore $i"
               ;;

               *)
               # ignore
                  log_debug "ignore $i"
               ;;
            esac
         ;;


#         mulle_objc_loadinfo_enqueue_nofail:#         ;;

         mulle_objc_loadinfo_enqueue_nofail)
            case "${MULLE_UNAME}" in
               windows|mingw)
                  log_debug "ignore $i"
               ;;

               *)
                  emit "$i"
               ;;
            esac
         ;;

         *)
            if ! is_crt_symbol "$i"
            then
               emit "$i"
            else
               log_debug "ignore "non crt" $i"
            fi
         ;;
      esac
   done
}


emit_dllmain()
{
   log_entry "emit_dllmain" "$@"

   return 0   # hmm

   echo '#define DLL_PROCESS_ATTACH      1
#define DLL_THREAD_ATTACH       2
#define DLL_THREAD_DETACH       3
#define DLL_PROCESS_DETACH      0


int __stdcall _DllMainCRTStartup( int hModule,
                                  long ul_reason_for_call,
                                  void *lpReserved)
{
   extern int __stdcall _CRT_INIT( int hinstDLL, long fdwReason, void *lpReserved);

   if( ul_reason_for_call == DLL_PROCESS_ATTACH || ul_reason_for_call == DLL_THREAD_ATTACH)
      _CRT_INIT( hModule, ul_reason_for_call, lpReserved);
   return 1;
}'


}

#
# create a  .o file with (almost) all the symbols that
# are missing from "$1"
#
create_undefined_linkage()
{
   log_entry "create_undefined_linkage" "$@"

   local infile="$1"
   local outfile="$2"
   local tmpdir="$3"

   local text

   text="`create_undefined_linkage_c "${infile}" "${tmpdir}"`" || fail "Creating undefined C linkage failed"
   if [ -z "${text}" ]
   then
      log_fluff "No undefined symbols to spoof for \"${infile}\""
      return 1
   fi

   local prelude

   case "${MULLE_UNAME}" in
      windows|mingw)
         prelude="`emit_dllmain`" || exit 1
         text="${prelude}
${text}"
      ;;
   esac

   local folder

   r_dirname "${outfile}"
   folder="${RVAL}"

   local cfile

   r_basename "${outfile}"
   cfile="${folder}/${RVAL%\.o}.c"
   
   redirect_exekutor "${cfile}" echo "${text}"

   if [ "${OPTION_WSL}" = 'YES' ]
   then
      cfile="`rexekutor wslpath -w "${cfile}" `" || exit 1
      exekutor touch "${outfile}" || exit 1 # have to touch for now as long as wslpath is broken
      outfile="`rexekutor wslpath -w "${outfile}" `" || exit 1
   fi

   local cflags

   r_shlib_cflags
   cflags="${RVAL}"

   log_fluff "Compile undefined symbol linkage \"${cfile}\"..."
   exekutor "${CC}" ${cflags} -Wno-incompatible-library-redeclaration \
                              -Wno-builtin-requires-header \
                              -Wno-incomplete-setjmp-declaration \
                              -c \
                              -o "${outfile}" \
                              "${cfile}" || exit 1
}


# always running in tmp for mingw only
create_mingw_aux_linkage()
{
   log_entry "create_mingw_aux_linkage" "$@"

   local outfile="$1"

   local auxfile

   auxfile="`basename -- "${outfile}" .o`".c || exit 1
   redirect_exekutor "${auxfile}" emit_enqueue

   local cflags

   r_shlib_cflags
   cflags="${RVAL}"

   log_fluff "Compile auxiliary linkage \"${auxfile}\"..."
   exekutor "${CC}" ${cflags} -Wno-incompatible-library-redeclaration \
                              -Wno-builtin-requires-header \
                              -c \
                              -o \
                              "${outfile}" \
                              "${auxfile}" || exit 1
}

_create_shlib_windows()
{
   log_entry "_create_shlib_windows" "$@"

   local shlib="$1"
   local library="$2"
   local undefinedofile="$3"
   local tmpdir="$4"
   local ldflags="$5"

   log_debug "${tmpdir} ($PWD#${MULLE_USER_PWD}/})"

   exekutor cp "${library}" "${tmpdir}"
   (
      exekutor cd "${tmpdir}" || exit 1

      local libraryname

      r_basename "${library}"
      libraryname="${RVAL}"

      local wholelibrary

      r_shlib_load_all_library "${libraryname}"
      wholelibrary="${RVAL}" || exit 1

      local files

      files="${wholelibrary}"

      create_mingw_aux_linkage "auxiliary.o" || exit 1
      files="${files} auxiliary.o" &&

      if create_undefined_linkage "${library}" "${undefinedofile}" "."
      then
         r_basename "${undefinedofile}"
         r_concat "${RVAL}" "${files}"
         files="${RVAL}"
      fi
      r_basename "${shlib}"
      shlib="${RVAL}"

      eval_exekutor "'${LD}'" "${ldflags}" "${files}" "${LIBRARIES}" -nologo "-OUT:'${shlib}'"
   ) >&2 || exit 1
}


_create_shlib()
{
   log_entry "_create_shlib" "$@"

   local shlib="$1"
   local library="$2"
   local undefinedofile="$3"
   local tmpdir="$4"

   local ldflags

   r_shlib_ldflags
   ldflags="${RVAL}"

   case "${MULLE_UNAME}" in
      windows|mingw*)
         _create_shlib_windows "$@" "${ldflags}"
         return $?
      ;;
   esac

   # just a bit faster than mingw needing to copy the library
   # for path reasons
   local wholelibrary

   r_shlib_load_all_library "${library}"
   wholelibrary="${RVAL}"

   local files

   files="${wholelibrary}"
   if create_undefined_linkage "${library}" "${undefinedofile}" "${tmpdir}"
   then
      files="${undefinedofile} ${files}"
   fi

   eval_exekutor "'${LD}'" "${ldflags}" "${files}" "${LIBRARIES}" -o "'${shlib}'" \
    || fail "Linking temporary shared library failed"
}


#
# create a shared library for the .a file
#
create_shlib()
{
   log_entry "create_shlib" "$@"

   local library="$1"
   local directory="$2"

   local ext

   r_shlib_extension
   ext="${RVAL}"

   local name

   r_basename "${library}"
   name="${RVAL%\.a}"

   local undefinedofile
   local shlib

   undefinedofile="${directory}/${name}.undef.o"
   log_debug "Undefined: ${undefinedofile}"

   shlib="${directory}/${name}.${ext}"

   log_fluff "Create shlib \"${shlib}\"..."
   _create_shlib "${shlib}" "${library}" "${undefinedofile}" "${directory}"

   if [ "${OPTION_KEEP}" != 'YES' ]
   then
      remove_file_if_present "${undefinedofile}"
   fi

   rexekutor printf "%s\n" "${shlib}"
}


main()
{
   local cmdline
   local library
   local shlib

   local OPTION_CONFIGURATION="Release"
   local OPTION_KEEP='NO'
   local OPTION_WSL='NO'

   # prefer sibling mulle-objc-list
   MULLE_OBJC_LIST="${0%/*}/mulle-objc-list"
   if [ ! -x "${MULLE_OBJC_LIST}" ]
   then
      MULLE_OBJC_LIST="`command -v "mulle-objc-list${MULLE_EXE_EXTENSION}"`"
      [ -z "${MULLE_OBJC_LIST}" ] && fail "mulle-objc-list${MULLE_EXE_EXTENSION} not in PATH"
   fi

   r_absolutepath "${MULLE_OBJC_LIST}"
   cmdline="'${RVAL}'"

   case "$1" in
      -h|--help|help)
         usage
      ;;
   esac

   #
   # collect options for mulle-objc-list
   #
   while [ $# -gt 1 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         --configuration)
            shift

            OPTION_CONFIGURATION="$1"
            shift
            continue
         ;;

         --wsl)
            OPTION_WSL='YES'
            shift
            continue
         ;;

         --keep|--keep-shlib)
            OPTION_KEEP='YES'
            shift
            continue
         ;;
      esac

      cmdline="${cmdline} '$1'"

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   if [ "${MULLE_FLAG_LOG_FLUFF}" = "YES" ]
   then
      cmdline="${cmdline} '-v'"
   fi

   library="$1"
   [ -z "${library}" ] && usage

   if [ ! -f "${library}" ]
   then
      fail "Library \"${library}\" not found"
   fi

   setup_cc_environment

   log_verbose "Create shared libs (if needed)..."

   local directory
   local rval

   # for windows we can't use "tmp" here because WSL tmp is not accessible from
   # wsl. Need to figure something out
   case "${MULLE_UNAME}" in
      mingw|windows)
         _r_make_tmp_in_dir "${PWD}" "lista" "d"
         directory="${RVAL}"
      ;;

      *)
         r_make_tmp_directory "lista" || exit 1
         directory="${RVAL}"
      ;;
   esac

   shlib="`create_shlib "${library}" "${directory}"`" || exit 1

   local shlibdir
   local shlibfile

   r_dirname "${shlib}"
   shlibdir="${RVAL}"

   r_basename "${shlib}"
   shlibfile="${RVAL}"

   cmdline="${cmdline} '${shlibfile}'"

   log_verbose "Run mulle-objc-list on shared library \"${shlib}\"..."

   # easy workaround to avoid wslpath, don't change unless you know
   # it works on windows
   (
      rexekutor cd "${shlibdir}" &&
      eval_exekutor "${cmdline}"
   )
   rval=$?

   if [ $rval -eq 0 ]
   then
      if [ "${OPTION_KEEP}" != 'YES' ]
      then
         rmdir_safer "${directory}"
      else
         log_verbose "Keeping \"${shlib}\" alive"
      fi
   fi
   return $rval
}

main "$@"
