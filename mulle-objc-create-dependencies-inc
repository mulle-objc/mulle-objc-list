#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

MULLE_EXECUTABLE_VERSION=0.9.1

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


#
# environment
#


usage()
{
   cat <<EOF >&2
usage:
   ${MULLE_EXECUTABLE} [options] <name> [dependencies]

   Name is the name of the library without prefix or
   extension and without "Standalone" suffix.
   Dependencies is the list of Objective-C dependencies
   of this library.

   Options:
      -f        : force write output
      -n        : don't actually do anything
      -o <file> : write output to file
EOF
   exit 1
}


#
# For each dependency, emit the necessary dependency on the loader
# except for MulleObjC
#
_dump_loader_dependencies()
{
   local depfile
   local depname

   local classid
   local categoryid

   classid="`mulle-objc-uniqueid MulleObjCLoader | tail -1`"
   while [ $# -ne 0 ]
   do
      case "$1" in
         *:*)
            depfile="`cut -d ':' -f 1 <<< "$1"`"
            depname="`cut -d ':' -f 2 <<< "$1"`"
         ;;

         *)
            depfile="${DEPENDENCIES_DIR}/include/$1/dependencies.inc"
            depname="$1"
         ;;
      esac

      if [ ! -f "${depfile}" ]
      then
         fail "\"${depfile}\" not found, mulle-bootstrap first"
      fi
      if [ -z "${depname}" ]
      then
         fail "No name given for dependency"
      fi

      case "${depname}" in
         MulleObjC)
            depname=""
         ;;
      esac

      if [ ! -z "${depname}" ]
      then
         categoryid="`mulle-objc-uniqueid "${depname}" | tail -1`"
         exekutor echo "      { @selector( MulleObjCLoader), \
@selector( ${depname}) },      // $classid;MulleObjCLoader;$categoryid;${depname}";
      fi

      shift
   done
}


_combine_dependencies_inc()
{
   local depfile

   while [ $# -ne 0 ]
   do
      depfile="${DEPENDENCIES_DIR}/include/$1/dependencies.inc"

      if [ ! -f "${depfile}" ]
      then
         fail "\"${depfile}\" not found, mulle-bootstrap first"
      fi

      cat "${depfile}"

      shift
   done
}


#
# the old way
#
_do_dump_dylib_dependencies()
{
   #
   # First get all classes and categories "below" OS for later removal
   # Then get all standalone classes, but remove Posix classes and
   # OS specifica. The remainder are osbase-dependencies
   #
   local tmpplus
   local tmpminus

   tmpplus="`mktemp "/tmp/plus-XXXXXX"`"
   tmpminus="`mktemp "/tmp/minus-XXXXXX"`"

   redirect_exekutor "${tmpminus}" _combine_dependencies_inc "$@" || fail "combine failed"
   redirect_exekutor "${tmpplus}" mulle-objc-list -d "${LIBRARYFILE}" || fail "mulle-objc-list failed"

   #
   # remove inherited dependencies from standalone dependencies
   # also remove MulleObjCLoader class as dependency
   #
   if [ ! -z "`cat "${tmpminus}"`" ]
   then
      exekutor fgrep -x -v -f"${tmpminus}" "${tmpplus}"
   else
      cat "${tmpplus}"
   fi

   if [ "${OPTION_REMOVE_TMP}" = "YES" ]
   then
      rm "${tmpplus}" "${tmpminus}"
   else
      log_info "${tmpplus} and ${tmpminus} not removed"
   fi
}


_do_dump_static_dependencies()
{
   exekutor mulle-objc-lista -d "${LIBRARYFILE}" || fail "mulle-objc-lista failed"
}


_dump_dependencies()
{
   DEPENDENCIES_DIR="`mulle-bootstrap paths --sdk "${OPTION_SDK}" \
                                            --configuration "${OPTION_CONFIGURATION}" \
                                            dependencies`"
   if [ -z "${DEPENDENCIES_DIR}" ]
   then
      fail "Could not get the dependencies path via mulle-boostrap paths"
   fi

   log_fluff "DEPENDENCIES_DIR : $PWD"

   _dump_loader_dependencies "$@" | sort | sort -u
   if [ ! -z "${LIBRARYFILE}" ]
   then
      _do_dump_static_dependencies | sort | sort -u
   fi
}


dump_dependencies()
{
   log_fluff "PWD          : $PWD"
   log_fluff "ARGV         : $*"
   log_fluff "BUILDPATH    : ${BUILDPATH}"

   _dump_dependencies "$@" |
      fgrep -v '{ @selector( MulleObjCLoader), MULLE_OBJC_NO_CATEGORYID }'
}


#
# parameters are dependencies
#
main()
{
   local BUILDPATH="${BUILDPATH:-.}"
   local OPTION_REMOVE_TMP="YES"
   local OPTION_FORCE="NO"
   local OPTION_CONFIGURATION="Release"
   local OPTION_SDK="Default"
   local OPTION_FORCE="NO"
   local OUTPUT

   while [ $# -ne 0 ]
   do
      if core_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -b|--build-path)
            [ $# -eq 1 ] && usage
            shift

            BUILDPATH="$1"
         ;;

         -c|--configuration)
            [ $# -eq 1 ] && echo "missing argument to $1"
            shift

            OPTION_CONFIGURATION="$1"
         ;;

         -f|--force)
            OPTION_FORCE="YES"
         ;;

         -n|--dry-run)
            MULLE_FLAG_EXECUTOR_DRY_RUN="YES"
         ;;

         --no-remove)
            OPTION_REMOVE_TMP="NO"
         ;;

         -o|--output)
            [ $# -eq 1 ] && echo "missing argument to $1"
            shift

            OUTPUT="$1"
         ;;

         -s|--sdk)
            [ $# -eq 1 ] && echo "missing argument to $1"
            shift

            OPTION_SDK="$1"
         ;;

         -)
            break
         ;;

         -*)
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done


   core_setup_trace "${MULLE_TRACE}"
   export MULLE_TRACE

   local name

   name="$1"
   [ -z "${name}" ] && usage
   shift

   case "${name}" in
      ""|"-")
      ;;

      *)
         if [ -f "${name}" ]
         then
            LIBRARYFILE="${name}" # assume
         else
            case "`uname -s`" in
               MINGW*|Win*|WIN*)
                  LIBRARYFILE="${BUILDPATH}/${name}.lib" # assume
               ;;

               *)
                  LIBRARYFILE="${BUILDPATH}/lib${name}.a"
               ;;
            esac
         fi
      ;;
   esac

   local pathcmd

   pathcmd="`mulle-bootstrap paths -s ':' -q "'" path`" || fail "mulle-bootstrap not found in PATH ($PATH)"

   eval "${pathcmd}"

   if [ -z "`command -v "mulle-objc-list"`" ]
   then
      fail "mulle-objc-list not found in PATH ($PATH)"
   fi

   if [ -z "`command -v "mulle-objc-lista"`" ]
   then
      fail "mulle-objc-lista not found in PATH ($PATH)"
   fi

   #
   # could build it dynamically --
   #
   if [ ! -z "${LIBRARYFILE}" -a ! -f "${LIBRARYFILE}" ]
   then
      fail "\"${LIBRARYFILE}\" not found. \
mulle-build first or specify build directory with -b"
   fi

   local result

   result="`dump_dependencies "$@"`" || exit 1

   if [ -z "${OUTPUT}" ]
   then
      exekutor echo "$result"
      return
   fi

   if [ "${OPTION_FORCE}" = "NO" ] && [ -f "${OUTPUT}" ]
   then
      local before

      before="`cat "${OUTPUT}"`"
      if [ "${result}" = "${before}" ]
      then
         log_verbose "Contents of \"`basename -- ${OUTPUT}`\" are already up to date"
         return 0
      fi
   fi

   redirect_exekutor "${OUTPUT}" echo "${result}"
   log_info "Wrote \"${OUTPUT}\""
}


_init()
{
   local libexecpath

   libexecpath="`mulle-bootstrap library-path 2> /dev/null`"
   if [ -z "${libexecpath}" ]
   then
      if [ -z "`command -v "mulle-bootstrap"`" ]
      then
         echo "${MULLE_EXECUTABLE} fatal error: Could not find mulle-bootstrap for \"${MULLE_EXECUTABLE}\" in \"$PATH\"" >&2
         exit 1
      fi

      echo "${MULLE_EXECUTABLE} fatal error: `which mulle-bootstrap` is incompatible" >&2
      exit 1
   fi

   . ${libexecpath}/mulle-bootstrap-logging.sh || internal_fail "mulle-bootstrap-logging.sh not found"
   . ${libexecpath}/mulle-bootstrap-functions.sh || internal_fail "mulle-bootstrap-functions.sh not found"
   . ${libexecpath}/mulle-bootstrap-core-options.sh || internal_fail "mulle-bootstrap-core-options.sh not found"
}


# sometimes passed in
if [ -z "${MULLE_EXECUTABLE}" ]
then
   MULLE_EXECUTABLE="`basename -- "$0"`"
   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE}"
fi

MULLE_EXECUTABLE="`basename -- "$0"`"
MULLE_ARGUMENTS="$@"
MULLE_EXECUTABLE_PID="$$"


set -o pipefail

_init "$@" # needs params

#
# combine all coverage files into one and sort -u it
#

main "$@"
