#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" -o "${MULLE_OBJC_LOADER_TOOL_TRACE}" = "YES" ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION=0.9.1

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


#
# environment
#
set -o pipefail

usage()
{
   cat <<EOF >&2
usage:
   ${MULLE_EXECUTABLE} [options] <name> [dependencies]

   Name is the name of the library without prefix or extension and without a
   "Standalone" suffix. Dependencies are a list of Objective-C dependencies
   of this library.

   Options:
      -f        : force write output
      -n        : don't actually do anything
      -o <file> : write output to file
EOF
   exit 1
}


#
# For each dependency, emit the necessary dependency on the loader
# except for MulleObjC
#
_dump_loader_dependencies()
{
   log_entry "_dump_loader_dependencies" "$@"

   local depfile
   local depname

   local classid
   local categoryid

   classid="`${MULLE_OBJC_UNIQUEID} MulleObjCLoader | tail -1`"
   while [ $# -ne 0 ]
   do
      case "$1" in
         *:*)
            depfile="`cut -d ':' -f 1 <<< "$1"`"
            depname="`cut -d ':' -f 2 <<< "$1"`"
         ;;

         *)
            depfile="${DEPENDENCY_DIR}/include/$1/objc-loader.inc"
            depname="$1"
         ;;
      esac

      if [ ! -f "${depfile}" ]
      then
         fail "\"${depfile}\" not found"
      fi
      if [ -z "${depname}" ]
      then
         fail "No name given for dependency"
      fi

      case "${depname}" in
         MulleObjC)
            depname=""
         ;;
      esac

      if [ ! -z "${depname}" ]
      then
         categoryid="`${MULLE_OBJC_UNIQUEID} "${depname}" | tail -1`"
         exekutor echo "      { @selector( MulleObjCLoader), \
@selector( ${depname}) },      // $classid;MulleObjCLoader;$categoryid;${depname}";
      fi

      shift
   done
}


_combine_dependencies_inc()
{
   log_entry "_combine_dependencies_inc" "$@"

   local depfile

   while [ $# -ne 0 ]
   do
      case "$1" in
         '/'*)
            depfile="$1"
         ;;

         *)
            depfile="${DEPENDENCY_DIR}/include/$1/objc-loader.inc"
         ;;
      esac

      if [ ! -f "${depfile}" ]
      then
         fail "\"${depfile}\" not found"
      fi

      cat "${depfile}"

      shift
   done
}


#
# the old way
#
_do_dump_dylib_dependencies()
{
   log_entry "_do_dump_dylib_dependencies" "$@"

   #
   # First get all classes and categories "below" OS for later removal
   # Then get all standalone classes, but remove Posix classes and
   # OS specifica. The remainder are osbase-dependencies
   #
   local tmpplus
   local tmpminus

   tmpplus="`make_tmp_file "plus"`"
   tmpminus="`make_tmp_file "minus"`"

   redirect_exekutor "${tmpminus}" _combine_dependencies_inc "$@" || fail "combine failed"

   local filename
   local directory

   filename="`fast_basename "${LIBRARYFILE}"`"
   directory="`fast_dirname "${LIBRARYFILE}"`"

   # inside cd for mingw, fixed path problems
   (
      exekutor cd "${directory}" &&
      redirect_exekutor "${tmpplus}" "${MULLE_OBJC_LIST}" \
                                          ${MULLE_TECHNICAL_FLAGS} \
                                          ${MULLE_OBJC_LIST_FLAGS} \
                                          -d "${filename}" \

   ) || fail "mulle-objc-list failed"
   #
   # remove inherited dependencies from standalone dependencies
   # also remove MulleObjCLoader class as dependency
   #
   if [ ! -z "`cat "${tmpminus}"`" ]
   then
      exekutor fgrep -x -v -f "${tmpminus}" "${tmpplus}"
   else
      rexekutor cat "${tmpplus}"
   fi

   if [ "${OPTION_REMOVE_TMP}" = "YES" ]
   then
      exekutor rm "${tmpplus}" "${tmpminus}"
   else
      log_info "${tmpplus} and ${tmpminus} not removed"
   fi
}


_do_dump_static_dependencies()
{
   log_entry "_do_dump_static_dependencies" "$@"

   local filename
   local directory

   filename="`fast_basename "${LIBRARYFILE}"`"
   directory="`fast_dirname "${LIBRARYFILE}"`"

   (
      exekutor cd "${directory}" &&
      exekutor "${MULLE_OBJC_LISTA}" ${MULLE_TECHNICAL_FLAGS} \
                                     ${MULLE_OBJC_LISTA_FLAGS} \
                                     --configuration "${OPTION_CONFIGURATION}" \
                                     -d "${filename}"
   ) || fail "mulle-objc-lista failed"
}


_dump_dependencies()
{
   log_entry "_dump_dependencies" "$@"

   local params

   if [ "${OPTION_SDK}" != "Default" ]
   then
      params="--sdk '${OPTION_SDK}'"
   fi

   if [ "${OPTION_CONFIGURATION}" != "Release" ]
   then
      params="${params} --configuration '${OPTION_CONFIGURATION}'"
   fi

   [ -z "${DEPENDENCY_DIR}" ] && fail "DEPENDENCY_DIR not set"

   local rval

   _dump_loader_dependencies "$@" | LC_ALL=C sort | LC_ALL=C sort -u
   if [ ! -z "${LIBRARYFILE}" ]
   then
      _do_dump_static_dependencies | LC_ALL=C sort | LC_ALL=C sort -u
   fi
}


dump_dependencies()
{
   log_entry "dump_dependencies" "$@"

   log_fluff "PWD          : $PWD"
   log_fluff "ARGV         : $*"
   log_fluff "BUILDPATH    : ${BUILDPATH}"

   local tmp

   tmp="`_dump_dependencies "$@"`" || exit 1

   fgrep -v '{ @selector( MulleObjCLoader), MULLE_OBJC_NO_CATEGORYID }' <<< "${tmp}"
   return 0
}


#
# parameters are dependencies
#
main()
{
   local BUILDPATH="${BUILDPATH:-.}"
   local OPTION_REMOVE_TMP="YES"
   local OPTION_FORCE="NO"
   local OPTION_CONFIGURATION="Release"
   local OPTION_SDK="Default"
   local OPTION_FORCE="NO"
   local OUTPUT


   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            usage
         ;;

         -b|--build-path)
            [ $# -eq 1 ] && usage
            shift

            BUILDPATH="$1"
         ;;

         -c|--configuration)
            [ $# -eq 1 ] && echo "missing argument to $1"
            shift

            OPTION_CONFIGURATION="$1"
         ;;

         -f|--force)
            OPTION_FORCE="YES"
         ;;

         --no-remove)
            OPTION_REMOVE_TMP="NO"
         ;;

         -o|--output)
            [ $# -eq 1 ] && echo "missing argument to $1"
            shift

            OUTPUT="$1"
         ;;

         -s|--sdk)
            [ $# -eq 1 ] && echo "missing argument to $1"
            shift

            OPTION_SDK="$1"
         ;;

         -|--)
            break
         ;;

         -*)
            log_error "unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local name

   name="$1"
   [ -z "${name}" ] && usage
   shift

   case "${name}" in
      ""|"-")
      ;;

      *)
         if [ -f "${name}" ]
         then
            LIBRARYFILE="${name}" # assume
         else
            case "`uname -s`" in
               MINGW*|Win*|WIN*)
                  LIBRARYFILE="${BUILDPATH}/${name}.lib" # assume
               ;;

               *)
                  LIBRARYFILE="${BUILDPATH}/lib${name}.a"
               ;;
            esac
         fi
      ;;
   esac

   # windows...

   FGREP="`command -v "fgrep"`"
   if [ -z  "${FGREP}" ]
   then
      fail "fgrep not found in PATH ($PATH)"
   fi

   MULLE_OBJC_LIST="`command -v "mulle-objc-list"`"
   if [ -z "${MULLE_OBJC_LIST}" ]
   then
      fail "mulle-objc-list not found in PATH ($PATH)"
   fi

   MULLE_OBJC_LISTA="`command -v "mulle-objc-lista"`"
   if [ -z "${MULLE_OBJC_LISTA}" ]
   then
      fail "mulle-objc-lista not found in PATH ($PATH)"
   fi

   MULLE_OBJC_UNIQUEID="`command -v "mulle-objc-uniqueid"`"
   if [ -z "${MULLE_OBJC_UNIQUEID}" ]
   then
      fail "mulle-objc-uniqueid not found in PATH ($PATH)"
   fi

   #
   # could build it dynamically --
   #
   if [ ! -z "${LIBRARYFILE}" -a ! -f "${LIBRARYFILE}" ]
   then
      fail "\"${LIBRARYFILE}\" not found. \
Craft it first or specify build directory with -b"
   fi

   local result

   result="`dump_dependencies "$@"`" || exit  1

   if [ -z "${result}" ]
   then
      log_warning "Did not find any dependencies. \
Is whole archive load working on this platform ?"
   fi

   if [ -z "${OUTPUT}" ]
   then
      log_info "Done"

      exekutor echo "$result"
      return 0
   fi

   if [ "${OPTION_FORCE}" = "NO" ] && [ -f "${OUTPUT}" ]
   then
      local before

      before="`cat "${OUTPUT}"`"
      if [ "${result}" = "${before}" ]
      then
         log_info "Contents of \"`basename -- ${OUTPUT}`\" are already up to date"
         return 0
      fi
   fi

   local directory

   mkdir_parent_if_missing "${OUTPUT}" || exit 1
   redirect_exekutor "${OUTPUT}" echo "${result}" || exit 1
   log_info "Wrote \"${OUTPUT}\""
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
}

#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="`tr '\\' '/' <<< "${PATH}"`"
   ;;
esac

_init "$@"
main "$@"

