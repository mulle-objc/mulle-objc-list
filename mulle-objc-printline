#! /bin/sh
#
# Look through libraries and find a name for the given
# uniqueid. Searches classes and methods at the moment.
#

MULLE_EXECUTABLE_VERSION=0.9.1

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "$1" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################


usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE} [options] <class>

   Print a class-coverage.csv line for a class or category. If you also specify
   a method with -m then a method-coverage.csv line will be printed.

Options:
   --method <name>   : specify method
   --category <name> : specify category
EOF

   options_technical_flags_usage | sort >&2

   exit 1
}


main()
{
   local LIB_PATH

   local OPTION_SELECTOR="NO"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      # your option handling
      case "$1" in
         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -c|--category)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            CATEGORY="$1"
         ;;

         -m|--method)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            METHOD="$1"
         ;;

         -h|--help)
            usage
         ;;

         -*)
            fail "unknown option $1"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local uniqueid

   [ $# -ne 1 ] && usage
   CLASS="$1"

   # prefer sibling mulle-objc-lista
   if [ -z "${MULLE_OBJC_UNIQUEID}" ]
   then
      MULLE_OBJC_UNIQUEID="${0%/*}/mulle-objc-uniqueid"
      if [ ! -x "${MULLE_OBJC_UNIQUEID}" ]
      then
         MULLE_OBJC_UNIQUEID="`command -v mulle-objc-uniqueid`"
         [ -z "${MULLE_OBJC_UNIQUEID}" ] && fail "mulle-objc-uniqueid not in PATH"
      fi
   fi

   CLASSID="`"${MULLE_OBJC_UNIQUEID}" "${CLASS}"`"

   if [ ! -z "${CATEGORY}" ]
   then
      CATEGORYID="`"${MULLE_OBJC_UNIQUEID}" "${CATEGORY}"`"
   fi

   if [ -z "${METHOD}" ]
   then
      echo "${CLASSID};${CLASS};${CATEGORYID};${CATEGORY}"
      return 0
   fi

   case "${METHOD}" in
      -*)
         PREFIX="-"
      ;;

      +*)
         PREFIX="+"
      ;;

      *)
         fail "Method must have - or + prefix"
      ;;
   esac

   METHOD="${METHOD:1:${#METHOD}-1}"
   METHODID="`"${MULLE_OBJC_UNIQUEID}" "${METHOD}"`"

   echo "${CLASSID};${CLASS};${CATEGORYID};${CATEGORY};${METHODID};${PREFIX}${METHOD}"
}


main "$@"
