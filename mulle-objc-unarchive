#! /usr/bin/env bash
#
# this script unpacks an .a file and creates a list of defined methods
# for each .o file
#

MULLE_EXECUTABLE_VERSION=0.9.1

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


usage()
{
   cat <<EOF >&2
Usage) ;;

   ${MULLE_EXECUTABLE} [options] [library]+

   Unarchive the given static libraries and prepare them for optimization.
   If no libraries are given, ${MULLE_EXECUTABLE} will unarchive all static
   libraries contained in \${DEPENDENCY_DIR}/lib.

Options:
   --unarchive-dir  <dir>    : where to unarchive libraries to

EOF

   options_technical_flags_usage | sort >&2

   exit 1
}



# ahem
lib_pretension()
{
   case "${MULLE_UNAME}" in
      mingw*)
      ;;

      *)
         echo "lib"
       ;;
   esac
}


lib_extension()
{
   case "${MULLE_UNAME}" in
      mingw*)
         echo "lib"
      ;;

      *)
         echo "a"
       ;;
   esac
}


shlib_extension()
{
   case "${MULLE_UNAME}" in
      darwin)
         echo "dylib"
      ;;

      *)
         echo "so"
       ;;
   esac
}


shlib_cflags()
{
   case "${MULLE_UNAME}" in
      darwin)
         echo "-fno-common"
      ;;

      *)
         echo "-fPIC -fno-common"
       ;;
   esac
}


shlib_ldflags()
{
   case "${MULLE_UNAME}" in
      darwin)
         echo "-dynamiclib -all_load -Os -flat_namespace -undefined suppress"
      ;;

      *)
         echo "-shared"
       ;;
   esac
}


#
# read symbols from .o file, figure out the ones that we need to "spoof"
# so that we can dummy link it
#
nm_global_undefined_names()
{
   local filename="$1"

   case "${MULLE_UNAME}" in
      darwin)
         exekutor nm -g -u -j "${filename}"
      ;;

      linux|*)
         # -p no sort, -P posix style (name first)
         exekutor nm -g --undefined-only -p -P "${filename}" | awk '{ print $1} '
      ;;
   esac

}


create_undefined_linkage_c()
{
   local infile="$1"

   local symbols

   # global, undefined, no type info
   case "${MULLE_UNAME}" in
      darwin)
         symbols="`nm_global_undefined_names "${infile}" | sed 's/^_//'`" || exit 1
      ;;

      *)
         symbols="`nm_global_undefined_names "${infile}"`" || exit 1
      ;;
   esac


   local i

   #
   # if we redefine standard library symbols, the compiler is not
   # happy so we copy the definitions here
   #
   # egrep '^LIBBUILTIN' mulle-clang/include/clang/Basic/Builtins.def | \
   #  sed s'/^LIBBUILTIN(\([^,]*\).*$/\1/' | \
   #  sort | \
   #  sed s'/\(.*\)/         \1) ;;/'
   #
   for i in ${symbols}
   do
      case $i in
#         NSLog) ;;
#         NSLogv) ;;
         _Block_object_assign) ;;
         _Block_object_dispose) ;;
         _Exit) ;;
         __cospi);;
         __cospif) ;;
         __exp10) ;;
         __exp10f) ;;
         __finite) ;;
         __finitef) ;;
         __finitel) ;;
         __sigsetjmp) ;;
         __sinpi);;
         __sinpif) ;;
         __tanpi) ;;
         __tanpif) ;;
         _byteswap_uint64) ;;
         _byteswap_ulong) ;;
         _byteswap_ushort);;
         _longjmp) ;;
         _setjmp) ;;
         _setjmpex) ;;
         abs) ;;
         acos) ;;
         acosf) ;;
         acosh) ;;
         acoshf) ;;
         acoshl) ;;
         acosl) ;;
         alloca);;
         asin) ;;
         asinf) ;;
         asinh) ;;
         asinhf) ;;
         asinhl) ;;
         asinl) ;;
         atan) ;;
         atan2) ;;
         atan2f) ;;
         atan2l) ;;
         atanf) ;;
         atanh);;
         atanhf) ;;
         atanhl) ;;
         atanl) ;;
         bzero) ;;
         cabs) ;;
         cabsf) ;;
         cabsl) ;;
         cacos) ;;
         cacosf) ;;
         cacosh) ;;
         cacoshf);;
         cacoshl) ;;
         cacosl) ;;
         calloc) ;;
         carg) ;;
         cargf) ;;
         cargl) ;;
         casin) ;;
         casinf) ;;
         casinh) ;;
         casinhf) ;;
         casinhl);;
         casinl) ;;
         catan) ;;
         catanf) ;;
         catanh) ;;
         catanhf) ;;
         catanhl) ;;
         catanl) ;;
         cbrt) ;;
         cbrtf) ;;
         cbrtl) ;;
         ccos) ;;
         ccosf);;
         ccosh) ;;
         ccoshf) ;;
         ccoshl) ;;
         ccosl) ;;
         ceil) ;;
         ceilf) ;;
         ceill) ;;
         cexp) ;;
         cexpf) ;;
         cexpl) ;;
         cimag) ;;
         cimagf);;
         cimagl) ;;
         clog) ;;
         clogf) ;;
         clogl) ;;
         conj) ;;
         conjf) ;;
         conjl) ;;
         copysign) ;;
         copysignf) ;;
         copysignl) ;;
         cos);;
         cosf) ;;
         cosh) ;;
         coshf) ;;
         coshl) ;;
         cosl) ;;
         cpow) ;;
         cpowf) ;;
         cpowl) ;;
         cproj) ;;
         cprojf) ;;
         cprojl) ;;
         creal) ;;
         crealf);;
         creall) ;;
         csin) ;;
         csinf) ;;
         csinh) ;;
         csinhf) ;;
         csinhl) ;;
         csinl) ;;
         csqrt) ;;
         csqrtf) ;;
         csqrtl) ;;
         ctan) ;;
         ctanf);;
         ctanh) ;;
         ctanhf) ;;
         ctanhl) ;;
         ctanl) ;;
         erf) ;;
         erfc) ;;
         erfcf) ;;
         erfcl) ;;
         erff) ;;
         erfl) ;;
         exp) ;;
         exp2) ;;
         exp2f) ;;
         exp2l);;
         expf) ;;
         expl) ;;
         expm1) ;;
         expm1f) ;;
         expm1l) ;;
         fabs) ;;
         fabsf) ;;
         fabsl) ;;
         fdim) ;;
         fdimf) ;;
         fdiml) ;;
         finite);;
         finitef) ;;
         finitel) ;;
         floor) ;;
         floorf) ;;
         floorl) ;;
         fma) ;;
         fmaf) ;;
         fmal) ;;
         fmax) ;;
         fmaxf) ;;
         fmaxl) ;;
         fmin) ;;
         fminf) ;;
         fminl) ;;
         fmod) ;;
         fmodf) ;;
         fmodl) ;;
         fprintf) ;;
         frexp) ;;
         frexpf) ;;
         frexpl) ;;
         fscanf) ;;
         getcontext) ;;
         hypot) ;;
         hypotf) ;;
         hypotl) ;;
         ilogb) ;;
         ilogbf) ;;
         ilogbl) ;;
         index) ;;
         isalnum) ;;
         isalpha) ;;
         isblank) ;;
         iscntrl) ;;
         isdigit) ;;
         isgraph) ;;
         islower) ;;
         isprint) ;;
         ispunct) ;;
         isspace) ;;
         isupper) ;;
         isxdigit) ;;
         labs) ;;
         ldexp) ;;
         ldexpf) ;;
         ldexpl) ;;
         lgamma) ;;
         lgammaf) ;;
         lgammal) ;;
         llabs) ;;
         llrint) ;;
         llrintf) ;;
         llrintl) ;;
         llround) ;;
         llroundf) ;;
         llroundl) ;;
         log) ;;
         log10) ;;
         log10f) ;;
         log10l) ;;
         log1p) ;;
         log1pf) ;;
         log1pl) ;;
         log2) ;;
         log2f) ;;
         log2l) ;;
         logb) ;;
         logbf) ;;
         logbl) ;;
         logf) ;;
         logl) ;;
         longjmp) ;;
         lrint) ;;
         lrintf) ;;
         lrintl) ;;
         lround) ;;
         lroundf) ;;
         lroundl) ;;
         malloc) ;;
         memchr) ;;
         memcmp) ;;
         memcpy) ;;
         memmove) ;;
         memset) ;;
         modf) ;;
         modff) ;;
         modfl) ;;
         nan) ;;
         nanf) ;;
         nanl) ;;
         nearbyint) ;;
         nearbyintf) ;;
         nearbyintl) ;;
         nextafter) ;;
         nextafterf) ;;
         nextafterl) ;;
         nexttoward) ;;
         nexttowardf) ;;
         nexttowardl) ;;
         objc_assign_global) ;;
         objc_assign_ivar) ;;
         objc_assign_strongCast) ;;
         objc_assign_weak) ;;
         objc_enumerationMutation) ;;
         objc_exception_extract) ;;
         objc_exception_match) ;;
         objc_exception_throw) ;;
         objc_exception_tryenter) ;;
         objc_exception_tryexit) ;;
         objc_getClass) ;;
         objc_getMetaClass) ;;
         objc_msgSend) ;;
         objc_msgSendSuper) ;;
         objc_msgSendSuper_stret) ;;
         objc_msgSend_fp2ret) ;;
         objc_msgSend_fpret) ;;
         objc_msgSend_stret) ;;
         objc_read_weak) ;;
         objc_sync_enter) ;;
         objc_sync_exit) ;;
         pow) ;;
         powf) ;;
         powl) ;;
         printf) ;;
         qsetjmp) ;;
         realloc) ;;
         remainder);;
         remainderf) ;;
         remainderl) ;;
         rindex) ;;
         rint) ;;
         rintf) ;;
         rintl) ;;
         round) ;;
         roundf) ;;
         roundl) ;;
         savectx);;
         scalbln) ;;
         scalblnf) ;;
         scalblnl) ;;
         scalbn) ;;
         scalbnf) ;;
         scalbnl) ;;
         scanf) ;;
         setjmp) ;;
         setjmp_syscall);;
         siglongjmp) ;;
         sigsetjmp) ;;
         sin) ;;
         sinf) ;;
         sinh) ;;
         sinhf) ;;
         sinhl) ;;
         sinl) ;;
         snprintf) ;;
         sprintf) ;;
         sqrt);;
         sqrtf) ;;
         sqrtl) ;;
         sscanf) ;;
         stpcpy) ;;
         stpncpy) ;;
         strcasecmp) ;;
         strcat) ;;
         strchr) ;;
         strcmp) ;;
         strcpy);;
         strcspn) ;;
         strdup) ;;
         strerror) ;;
         strlcat) ;;
         strlcpy) ;;
         strlen) ;;
         strncasecmp) ;;
         strncat) ;;
         strncmp);;
         strncpy) ;;
         strndup) ;;
         strpbrk) ;;
         strrchr) ;;
         strspn) ;;
         strstr) ;;
         strtok) ;;
         strxfrm) ;;
         tan) ;;
         tanf) ;;
         tanh);;
         tanhf) ;;
         tanhl) ;;
         tanl) ;;
         tgamma) ;;
         tgammaf) ;;
         tgammal) ;;
         tolower) ;;
         toupper) ;;
         trunc) ;;
         truncf) ;;
         truncl);;
         vfork) ;;
         vfprintf) ;;
         vfscanf) ;;
         vprintf) ;;
         vscanf) ;;
         vsnprintf) ;;
         vsprintf) ;;
         vsscanf) ;;
         wcschr);;
         wcscmp) ;;
         wcslen) ;;
         wcsncmp) ;;
         wmemchr) ;;
         wmemcmp) ;;
# CRT symbols
         _GLOBAL_OFFSET_TABLE_) ;;

         mulle_objc_loadinfo_enqueue_nofail) ;;

         *)
            echo "void  $i() {}"
         ;;
      esac
   done
}


#
# create a  .o file with (almost) all the symbols that
# are missing from "$1"
#
create_undefined_linkage()
{
   log_entry "create_undefined_linkage" "$@"

   local infile="$1"
   local outfile="$2"

   local text

   text="`create_undefined_linkage_c "${infile}"`"
   if [ -z "${text}" ]
   then
      log_fluff "No undefined symbols to spoof for \"${infile}\""
      return 1
   fi

   local cfile
   local folder

   folder="`dirname -- "${outfile}"`"
   cfile="${folder}/`basename -- "${outfile}" .o`".c
   redirect_exekutor  "${cfile}" echo "${text}"

   local cflags

   cflags="`shlib_cflags`"

   log_fluff "Compile undefined symbol linkage \"${cfile}\"..."
   exekutor mulle-clang ${cflags} -c -o "${outfile}" "${cfile}" || exit 1
}


name_from_library()
{
   log_entry "name_from_library" "$@"

   local library="$1"

   # remove extension
   library="`extensionless_basename "${library}"`"

   # remove prefix
   case "${library}" in
      lib*)
         library="`sed 's/^lib//' <<< "${library}"`"
      ;;
   esac

   case "${library}" in
      *Standalone)
         library="`sed 's/Standalone$//' <<< "${library}"`"
      ;;
   esac

   echo "${library}"
}


foldername_from_library()
{
   log_entry "foldername_from_library" "$@"

   local library="$1"
   local prefix="$2"

   local name

   name="`name_from_library "${library}"`"
   echo "${prefix}${name}.d"
}


#
# create a shared library for each .o file
#
create_shlibs()
{
   log_entry "create_shlibs" "$@"

   local folder="$1"

   local i
   local name
   local undefined
   local files
   local shlib

   local ext
   local ldflags

   ext="`shlib_extension`"
   ldflags="`shlib_ldflags`"

   for i in "${folder}/"*.o
   do
      case "${i}" in
         "${folder}/*.o")
            log_warning "No .o files found in \"${folder}\""
            continue
         ;;

         #
         # can happe in non-optimizable case, where we still produce
         # method-db.csv and class-db.csv
         #
         "${folder}/MulleObjCLoader"*)
            continue
         ;;
      esac

      name="${folder}/`basename "$i" .o`"
      undefined="${name}.undef.o"
      files="${i}"
      shlib="${name}.${ext}"

      if create_undefined_linkage "${i}" "${undefined}"
      then
         files="${files} ${undefined}" # order important for linux ?
      fi

      log_fluff "Create shlib \"${shlib}\"..."

      exekutor mulle-clang ${ldflags} ${files} -o "${shlib}" || fail "Failed to produce \"${shlib}\", can't optimize \"${name}\""

      if [ "${OPTION_KEEP_TMP}" = "YES" ]
      then
         exekutor mv "${undefined}" "${undefined}.tmp"
      else
         remove_file_if_present "${undefined}"
      fi
   done
}


unpack_library_into_folder()
{
   log_entry "unpack_library_into_folder" "$@"

   local library="$1"
   local folder="$2"

   if [ -d "${folder}" ]
   then
      exekutor rm -rf "${folder}" || return 1
   fi

   case "${library}" in
      /*|~*)
      ;;

      *)
         library="`pwd -P`/${library}"
      ;;
   esac

   (
      mkdir_if_missing "${folder}" &&
      exekutor cd "${folder}" &&
      exekutor ar x "${library}"
   ) || return 1
}


remove_all_extensions()
{
   log_entry "remove_all_extensions" "$@"

   local name

   name="`extensionless_basename "$1"`"
   if [ "${name}" = "$1" ]
   then
      echo "${name}"
      return 0
   fi

   remove_all_extensions "${name}"
}


emit_loader_source()
{
   log_entry "emit_loader_source" "$@"

   name="$1"

   cat <<EOF
#include <MulleObjC/MulleObjC.h>


@implementation MulleObjCLoader( ${name})

+ (struct _mulle_objc_dependency *) dependencies
{
   static struct _mulle_objc_dependency   dependencies[] =
   {
#include "loader-dependencies.inc"
#include "class-dependencies.inc"
#include "category-dependencies.inc"
      { MULLE_OBJC_NO_CLASSID, MULLE_OBJC_NO_CATEGORYID }
   };

   return( dependencies);
}

@end
EOF
}


prepare_for_optimizer()
{
   log_entry "prepare_for_optimizer" "$*"

   local folder="$1"
   local library="$2"

   local name
   local include
   local libpath
   local libdir

   libpath="`absolutepath "${library}"`"
   libdir="`dirname -- "${libpath}"`"
   name="`name_from_library "${library}"`"
   include="${libdir}/../include/${name}"

   local count
   local has_objc

   count="`ls -1 "${folder}/MulleObjCLoader"*.o 2> /dev/null | wc -l | awk '{ print $1 }'`"
   case "${count}" in
      1)
         if [ ! -f "${include}/objc-loader.inc" ]
         then
            log_warning "\"${name}\" is not optimizable as \"${include}/objc-loader.inc\" was not found"
            exekutor touch "${folder}/.unoptimizable" || exit 1
            return
         fi
         # fall thru
      ;;

      0)
         #
         # if it's a plain c library, memorize this
         #
         has_objc="`mulle-objc-lista -i "${libpath}" 2> /dev/null`"
         if [ -z "${has_objc}" ]
         then
            log_fluff "\"${name}\" has been deemed C only"
            exekutor touch "${folder}/.c_only" || exit 1
         else
            log_warning "\"${name}\" is not optimizable as it contains no MulleObjCLoader category .o file"
            exekutor touch "${folder}/.unoptimizable" || exit 1
         fi

         return
      ;;

      *)
         log_warning "\"${name}\" is not optimizable as it contains multiple MulleObjCLoader category .o files"
         exekutor touch "${folder}/.unoptimizable" || exit 1

         return
      ;;
   esac

   local loader
   local filename
   local loadername
   local categoryname

   loader="`ls -1 "${folder}/MulleObjCLoader"*.o`"
   filename="`basename -- "${loader}"`"
   loadername="`remove_all_extensions "${filename}"`"
   categoryname="`sed 's/MulleObjCLoader[ _+-]*\(.*\)/\1/' <<< "${loadername}"`"

   if [ -z "${categoryname}" ]
   then
      log_info "\"${name}\" is not optimizable as it contains the MulleObjCLoader class .o file"
      exekutor touch "${folder}/.unoptimizable" || exit 1
      return
   fi

   if [ "${categoryname}" != "${name}" ]
   then
      log_warning "\"${name}\" is not optimizable as it contains \"${filename})\", but expected \"MulleObjCLoader+${name}.o\""
      exekutor touch "${folder}/.unoptimizable" || exit 1
      return 1
   fi

   log_fluff "Loader \"${filename}\" and \"objc-loader.inc\" found"

   redirect_exekutor "${folder}/dependencies_db.csv" sed 's|^.*// *||' "${include}/objc-loader.inc"
   exekutor egrep '// *58bd58d3' "${include}/objc-loader.inc"  | \
      redirect_exekutor "${folder}/loader-dependencies.inc" fgrep -v ';;'

   redirect_exekutor "${folder}/MulleObjCLoader+${name}.m" emit_loader_source "${name}"

   #
   # remove the loader that we will regenerate later
   #
   exekutor rm -f "${loader}" || fail "Could not remove \"${loader}\""

   return 0
}


unpack_library()
{
   log_entry "unpack_library" "$@"

   local library="$1"

   local folder
   local name

   [ ! -f "${library}" ] && fail "\"${library}\" not found"

   folder="`foldername_from_library "${library}" "${UNARCHIVE_PREFIX}"`"

   if [ "${OPTION_FORCE}" = "NO" ] && [ "${folder}/.unpack_done" -nt "${library}" ]
   then
      log_fluff "${folder} is up to date"
      return 0
   fi

   name="`name_from_library "${library}"`"
   log_fluff "Unpacking ${C_MAGENTA}${C_BOLD}${name}${C_VERBOSE} ..."

   unpack_library_into_folder "${library}" "${folder}" || fail "unpack failed"

   prepare_for_optimizer "${folder}" "${library}"

   if [ ! -f "${folder}/.c_only" ]
   then
      if [ ! -f "${folder}/.unoptimizable" ]
      then
         create_shlibs "${folder}" || return 1

         log_verbose "Unpacked ${C_MAGENTA}${C_BOLD}${name}${C_VERBOSE} as ObjC"

         #
         # only in this case do we want to post-process
         #
         echo "${library}"
      else
         log_verbose "Unpacked ${C_MAGENTA}${C_BOLD}${name}${C_VERBOSE} as unoptimizable ObjC"
      fi
   else
      log_verbose "Unpacked ${C_MAGENTA}${C_BOLD}${name}${C_VERBOSE} as C"
   fi

   touch "${folder}/.unpack_done"

   # global marker that somethings changed
   touch "${UNARCHIVE_PREFIX}.unpack_done"
}


unpack_all()
{
   log_entry "unpack_all" "$@"

   while [ $# -ne 0 ]
   do
      unpack_library "$1" || return 1

      shift
   done
}


# run this with "folder" as PWD
create_method_csv()
{
   log_entry "create_method_csv" "$*"

   local folder="$1"

   local ext
   local i
   local name
   local sedexpr
   local shlib

   ext="`shlib_extension`"

   for shlib in *".${ext}"
   do
      if [ "${shlib}" = "*.${ext}" ]
      then
         log_fluff "No shared libraries were produced"
         continue
      fi

      name="`basename -- "${shlib}" ".${ext}"`"
      i="${name}.o"

      log_fluff "Create entries for methods of \"$i\"..."

      sedexpr="s|\$|;${folder}\/${i}|"
      ( exekutor mulle-objc-list -T "${shlib}" | exekutor sed "${sedexpr}" ) || return 1
   done
}


# run this with "folder" as PWD
create_class_csv()
{
   log_entry "create_class_csv" "$*"

   local folder="$1"

   local ext
   local i
   local name
   local sedexpr
   local shlib

   ext="`shlib_extension`"

   for shlib in *".${ext}"
   do
      if [ "${shlib}" = "*.${ext}" ]
      then
         log_fluff "No shared libraries were produced"
         continue
      fi

      name="`basename -- "${shlib}" ".${ext}"`"
      ofile="${name}.o"

      log_fluff "Create entries for classes of \"$ofile\"..."

      sedexpr="s|\$|;${folder}\/${ofile}|"
      ( exekutor mulle-objc-list -C "${shlib}" | exekutor sed "${sedexpr}" ) || return 1
   done
}


create_method_csv_db()
{
   log_entry "create_method_csv_db" "$*"

   local folder="$1"

   log_fluff "Add methods in \"${folder}\" ..."

   redirect_exekutor "method_db.csv" create_method_csv "${folder}" || fail "failed to produce method_db.csv"
}


create_class_csv_db()
{
   log_entry "create_class_csv_db" "$*"

   local folder="$1"

   log_fluff "Add classes in \"${folder}\" ..."

   redirect_exekutor "class_db.csv" create_class_csv "${folder}" || fail "failed to produce class_db.csv"
}


clean_folder_tmp()
{
   log_entry "clean_folder_tmp" "$*"

   local folder="$1"

   ext="`shlib_extension`"

   log_fluff "Removing shlibs in \"${folder}\" ..."

   exekutor rm -f *."${ext}" 2> /dev/null
}


create_databases()
{
   log_entry "create_databases" "$@"

   libraries="$1"

   [ -e "${UNARCHIVE_PREFIX}.unpack_done" ] || internal_fail "\"${UNARCHIVE_PREFIX}.unpack_done\" is missing"

   if [ "${OPTION_FORCE}" = "NO" ] && [ "${UNARCHIVE_PREFIX}.unarchive_done" -nt "${UNARCHIVE_PREFIX}.unpack_done" ]
   then
      log_info "Database files are up to date"
      return
   fi

   local old
   local lib
   local folder
   local name

   IFS="
"
   for lib in ${libraries}
   do
      IFS="${DEFAULT_IFS}"

      folder="`foldername_from_library "${lib}" "${UNARCHIVE_PREFIX}"`"
      name="`name_from_library "${lib}"`"

      [ -e "${folder}/.unpack_done" ] || internal_fail "\"${folder}/.unpack_done\" is missing"

      old="${PWD}"
      if [ ! -f "${folder}/.c_only" ]
      then
         log_verbose "Create databases for ${C_MAGENTA}${C_BOLD}${name}${C_VERBOSE} ..."

         rexekutor cd "${folder}" || return 1

         create_method_csv_db "${folder}"
         create_class_csv_db "${folder}"

         if [ "${OPTION_KEEP_TMP}" = "NO" ]
         then
            clean_folder_tmp "${folder}"
         fi
         rexekutor cd "${old}"

         exekutor touch "${folder}/.unarchive_done"
      else
         log_fluff "${lib} is C only"
      fi
   done

   exekutor touch "${UNARCHIVE_PREFIX}.unarchive_done"

   IFS="${DEFAULT_IFS}"
}


unarchive()
{
   log_entry "unarchive" "$@"

   if [ $# -eq 0 ]
   then
      [ -z "${DEPENDENCY_DIR}" ] && usage

      if [ ! -d "${DEPENDENCY_DIR}/lib" ]
      then
         fail "\"${DEPENDENCY_DIR}/lib\" not found"
      fi

      local libext
      local lib
      local i

      log_info "Unpacking libraries found in ${C_RESET}${C_BOLD}${DEPENDENCY_DIR}/lib${C_INFO} ..."

      libext="`lib_extension`"
      IFS="
"
      for i in `ls -1 "${DEPENDENCY_DIR}/lib"/*.${libext}`
      do
         IFS="${DEFAULT_IFS}"

         unpack_library "$i" || return 1
      done
      IFS="${DEFAULT_IFS}"
   else
      log_info "Unpacking libraries ..."
      unpack_all "$@"
   fi
}


main()
{
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_TERSE="NO"
   local MULLE_TRACE
   local MULLE_TRACE_POSTPONE="NO"
   local UNARCHIVE_PREFIX=""
   local DB_PREFIX=""
   local OPTION_FORCE="NO"
   local OPTION_KEEP_TMP="NO"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      # your option handling
      case "$1" in
         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -f|--force)
            OPTION_FORCE="YES"
         ;;

         --keep-tmp)
            OPTION_KEEP_TMP="YES"
         ;;

         --unarchive-dir)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            UNARCHIVE_PREFIX="$1"
            case "${UNARCHIVE_PREFIX}" in
               */|"")
               ;;

               *)
                  UNARCHIVE_PREFIX="${UNARCHIVE_PREFIX}/"
               ;;
            esac
         ;;

         -h|--help)
            usage
         ;;

         -*)
            fail "unknown option $1"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      MULLE_VIRTUAL_ROOT="`mulle-sde project-dir`"
      [ -z "${MULLE_VIRTUAL_ROOT}" ] && fail "MULLE_VIRTUAL_ROOT can not be determined"
   fi

   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_CRAFT_DEPENDENCY_DIR}}"
   DEPENDENCY_DIR="${DEPENDENCY_DIR:-${MULLE_VIRTUAL_ROOT}/${MULLE_CRAFT_DEPENDENCY_DIRNAME:-dependency}}"

   # your code follows here
   if [ -z "`command -v mulle-objc-list`" ]
   then
      fail "mulle-objc-list not in PATH"
   fi
   if [ -z "`command -v mulle-objc-lista`" ]
   then
      fail "mulle-objc-lista not in PATH"
   fi

   local libraries

   libraries="`unarchive "$@"`" || exit 1

   if [ ! -z "${libraries}" ]
   then
      log_info "Creating databases..."

      create_databases "${libraries}"

      log_info "Done"
   else
      log_info "Databases are up to date."
   fi
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   set -o pipefail
}

#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="`tr '\\' '/' <<< "${PATH}"`"
   ;;
esac

#
# combine all coverage files into one and sort -u it
#

_init "$@"
main "$@"
